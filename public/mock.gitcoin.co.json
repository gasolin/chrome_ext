[{"url":"/issue/MetaMask/metamask-extension/3127","created_on":"2018-02-20T15:01:32.307714-07:00","modified_on":"2018-03-15T23:15:13.629764-07:00","title":"Seed Phrase Bug Bounty","web3_created":"2018-01-29T06:40:09-07:00","value_in_token":"1000000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Security","project_length":"Unknown","experience_level":"Advanced","github_url":"https://github.com/MetaMask/metamask-extension/issues/3127","github_comments":27,"bounty_owner_address":"0x55e2780588aa5000f464f700d2676fd0a22ee160","bounty_owner_email":"dan@danfinlay.com","bounty_owner_github_username":"danfinlay","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-07-28T06:40:09-07:00","raw_data":{"id":9,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Seed Phrase Bug Bounty","issuer":{"name":"Dan Finlay","email":"dan@danfinlay.com","address":"0x55e2780588aa5000f464f700d2676fd0a22ee160","githubUsername":"@danfinlay"},"created":1517258409,"funders":[],"metadata":{"fullName":"Dan Finlay","tokenName":"ETH","bountyType":"Security","issueTitle":"Seed Phrase Bug Bounty","issueKeywords":"metamask-extension, MetaMask, JavaScript, CSS, HTML","projectLength":"Unknown","githubUsername":"@danfinlay","experienceLevel":"Advanced","issueDescription":"As part of our commitment to the best security we can offer, the MetaMask team is planning to continuously offer a bug bounty on our seed phrase functionality, we are starting the bounty at 1 ether, but anyone is free to add to the bounty as they like.\n\n[As we have written about before](https://medium.com/metamask/metamask-security-advisory-and-bug-bounty-for-seed-phrase-concern-bbd95ab63210) #2577, and [have awarded a bounty for in the past](https://medium.com/metamask/seed-phrase-issue-bounty-awarded-e1986e811021), sometimes users have reported that the seed phrase they were originally given does not restore their original accounts.\n\nWe have continued to receive rare but concerning accounts of similar experiences: #2904 #3042\n\nThe bounty will be paid to anyone who can demonstrate a condition in MetaMask's code base, either through automated tests or manual reproduction, where MetaMask would show a user a seed phrase on first setup that would not work for later restoring their accounts.\n\nThanks for your interest and participation, we're available to answer any questions about our key management here.","notificationEmail":"dan@danfinlay.com"},"tokenName":"ETH","categories":["metamask-extension"," MetaMask"," JavaScript"," CSS"," HTML"],"description":"As part of our commitment to the best security we can offer, the MetaMask team is planning to continuously offer a bug bounty on our seed phrase functionality, we are starting the bounty at 1 ether, but anyone is free to add to the bounty as they like.\n\n[As we have written about before](https://medium.com/metamask/metamask-security-advisory-and-bug-bounty-for-seed-phrase-concern-bbd95ab63210) #2577, and [have awarded a bounty for in the past](https://medium.com/metamask/seed-phrase-issue-bounty-awarded-e1986e811021), sometimes users have reported that the seed phrase they were originally given does not restore their original accounts.\n\nWe have continued to receive rare but concerning accounts of similar experiences: #2904 #3042\n\nThe bounty will be paid to anyone who can demonstrate a condition in MetaMask's code base, either through automated tests or manual reproduction, where MetaMask would show a user a seed phrase on first setup that would not work for later restoring their accounts.\n\nThanks for your interest and participation, we're available to answer any questions about our key management here.","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/MetaMask/metamask-extension/issues/3127","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x55e2780588aa5000F464f700D2676fD0a22Ee160","arbiter":"0x0000000000000000000000000000000000000000","balance":1000000000000000000,"network":"mainnet","deadline":1532810409,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":1000000000000000000},"metadata":{"fullName":"Dan Finlay","tokenName":"ETH","bountyType":"Security","issueTitle":"Seed Phrase Bug Bounty","issueKeywords":"metamask-extension, MetaMask, JavaScript, CSS, HTML","projectLength":"Unknown","githubUsername":"@danfinlay","experienceLevel":"Advanced","issueDescription":"As part of our commitment to the best security we can offer, the MetaMask team is planning to continuously offer a bug bounty on our seed phrase functionality, we are starting the bounty at 1 ether, but anyone is free to add to the bounty as they like.\n\n[As we have written about before](https://medium.com/metamask/metamask-security-advisory-and-bug-bounty-for-seed-phrase-concern-bbd95ab63210) #2577, and [have awarded a bounty for in the past](https://medium.com/metamask/seed-phrase-issue-bounty-awarded-e1986e811021), sometimes users have reported that the seed phrase they were originally given does not restore their original accounts.\n\nWe have continued to receive rare but concerning accounts of similar experiences: #2904 #3042\n\nThe bounty will be paid to anyone who can demonstrate a condition in MetaMask's code base, either through automated tests or manual reproduction, where MetaMask would show a user a seed phrase on first setup that would not work for later restoring their accounts.\n\nThanks for your interest and participation, we're available to answer any questions about our key management here.","notificationEmail":"dan@danfinlay.com"},"current_bounty":true,"value_in_eth":1e+18,"token_value_in_usdt":607.66,"value_in_usdt":607.66,"status":"open","now":"2018-03-16T06:17:03.533025Z","avatar_url":"https://avatars2.githubusercontent.com/u/11744586?v=4","value_true":1.0,"issue_description":"As part of our commitment to the best security we can offer, the MetaMask team is planning to continuously offer a bug bounty on our seed phrase functionality, we are starting the bounty at 1 ether, but anyone is free to add to the bounty as they like.\r\n\r\n[As we have written about before](https://medium.com/metamask/metamask-security-advisory-and-bug-bounty-for-seed-phrase-concern-bbd95ab63210) #2577, and [have awarded a bounty for in the past](https://medium.com/metamask/seed-phrase-issue-bounty-awarded-e1986e811021), sometimes users have reported that the seed phrase they were originally given does not restore their original accounts.\r\n\r\nWe have continued to receive rare but concerning accounts of similar experiences: #2904 #3042\r\n\r\nThe bounty will be paid to anyone who can demonstrate a condition in MetaMask's code base, either through automated tests or manual reproduction, where MetaMask would show a user a seed phrase on first setup that would not work for later restoring their accounts.\r\n\r\nThanks for your interest and participation, we're available to answer any questions about our key management here.","network":"mainnet","org_name":"MetaMask","pk":1323,"issue_description_text":"As part of our commitment to the best security we can offer, the MetaMask team is planning to continuously offer a bug bounty on our seed phrase functionality, we are starting the bounty at 1 ether, but anyone is free to add to the bounty as they like.\r\n\r\n[As we have written about before](https://medium.com/metamask/metamask-security-advisory-and-bug-bounty-for-seed-phrase-concern-bbd95ab63210) #2577, and [have awarded a bounty for in the past](https://medium.com/metamask/seed-phrase-issue-bounty-awarded-e1986e811021), sometimes users have reported that the seed phrase they were originally given does not restore their original accounts.\r\n\r\nWe have continued to receive rare but concerning accounts of similar experiences: #2904 #3042\r\n\r\nThe bounty will be paid to anyone who can demonstrate a condition in MetaMask's code base, either through automated tests or manual reproduction, where MetaMask would show a user a seed phrase on first setup that would not work for later restoring their accounts.\r\n\r\nThanks for your interest and participation, we're available to answer any questions about our key management here.","standard_bounties_id":9,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/dharmaprotocol/charta/4","created_on":"2018-02-20T15:02:05.660319-07:00","modified_on":"2018-03-15T23:15:17.154920-07:00","title":"FR: Collateralized Base Contract for Terms Contracts","web3_created":"2018-01-31T18:45:23-07:00","value_in_token":"70000000000000010.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"","project_length":"Unknown","experience_level":"","github_url":"https://github.com/dharmaprotocol/charta/issues/4","github_comments":2,"bounty_owner_address":"0x2987aa227df48d4891b3fe667c7a0c463f8857b1","bounty_owner_email":"nadav@dharma.io","bounty_owner_github_username":"nadavhollander","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2019-01-31T18:45:23-07:00","raw_data":{"id":21,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"FR: Collateralized Base Contract for Terms Contracts","issuer":{"name":"Nadav Hollander","email":"nadav@dharma.io","address":"0x2987aa227df48d4891b3fe667c7a0c463f8857b1","githubUsername":"nadavhollander"},"created":1517474723,"funders":[],"metadata":{"fullName":"Nadav Hollander","tokenName":"ETH","bountyType":"","issueTitle":"FR: Collateralized Base Contract for Terms Contracts","issueKeywords":"charta, dharmaprotocol, TypeScript, Solidity, HTML, JavaScript","projectLength":"Unknown","githubUsername":"nadavhollander","experienceLevel":"","issueDescription":"## Feature Request: \n\nCreate a generic base contract under the `contracts/examples/` folder for holding tokens of different types as collateral in a Dharma terms contract that inherits from the contract.  In the ideal case, I'd love to see a `Collateralized.sol` file with usage akin to [OpenZeppelin's](https://github.com/OpenZeppelin/zeppelin-solidity) `Owned.sol` or `Pausable.sol`, i.e.\n\n```solidity\nimport \"charta/contracts/examples/Collateralized.sol\";\nimport \"charta/contracts/Terms.sol\";\n\ncontract CompoundInterestTermsContract is TermsContract, Collateralized {\n\n...\n\n}\n```\n\n## Specification:\n\nThe flow for collateralizing an asset should be as follows:\n\n1. User grants `transferFrom` allowance for desired collateral amount on desired collateral token to the TermsContract that inherits from `Collateralized.sol` (using the ERC20 `approve` method)\n2. User calls `collateralize(bytes32 issuanceCommitmentHash, address token, uint amount, uint lockupPeriodEndBlockNumber)`.  Terms contract then transfers itself the desired collateral, and records all relevant information (including the user-defined `lockupPeriodEndBlockNumber`) as associated with the given `issuanceCommitmentHash`.\n\nAfter an asset has been collateralized one of the following can happen:\n\n- When `block.number > lockupPeriodEndBlockNumber`, any user can call `returnCollateral`, and the contract will transfer the debtor back the collateral (if it hasn't already been seized)\n- When, at **any** time, `getExpectedRepaymentValue() > getValueRepaid()` on the TermsContract that inherits from `Collateralized.sol`, any user can call `seizeCollateral`, and the contract will transfer the collateral to the debt agreement's beneficiary.\n\n## Acceptance Criteria\n- [ ] Is the contract clean, well-documented, and generic?\n- [ ] Is a thorough test harness present (both unit and integration tests)?","notificationEmail":"nadav@dharma.io"},"tokenName":"ETH","categories":["charta"," dharmaprotocol"," TypeScript"," Solidity"," HTML"," JavaScript"],"description":"## Feature Request: \n\nCreate a generic base contract under the `contracts/examples/` folder for holding tokens of different types as collateral in a Dharma terms contract that inherits from the contract.  In the ideal case, I'd love to see a `Collateralized.sol` file with usage akin to [OpenZeppelin's](https://github.com/OpenZeppelin/zeppelin-solidity) `Owned.sol` or `Pausable.sol`, i.e.\n\n```solidity\nimport \"charta/contracts/examples/Collateralized.sol\";\nimport \"charta/contracts/Terms.sol\";\n\ncontract CompoundInterestTermsContract is TermsContract, Collateralized {\n\n...\n\n}\n```\n\n## Specification:\n\nThe flow for collateralizing an asset should be as follows:\n\n1. User grants `transferFrom` allowance for desired collateral amount on desired collateral token to the TermsContract that inherits from `Collateralized.sol` (using the ERC20 `approve` method)\n2. User calls `collateralize(bytes32 issuanceCommitmentHash, address token, uint amount, uint lockupPeriodEndBlockNumber)`.  Terms contract then transfers itself the desired collateral, and records all relevant information (including the user-defined `lockupPeriodEndBlockNumber`) as associated with the given `issuanceCommitmentHash`.\n\nAfter an asset has been collateralized one of the following can happen:\n\n- When `block.number > lockupPeriodEndBlockNumber`, any user can call `returnCollateral`, and the contract will transfer the debtor back the collateral (if it hasn't already been seized)\n- When, at **any** time, `getExpectedRepaymentValue() > getValueRepaid()` on the TermsContract that inherits from `Collateralized.sol`, any user can call `seizeCollateral`, and the contract will transfer the collateral to the debt agreement's beneficiary.\n\n## Acceptance Criteria\n- [ ] Is the contract clean, well-documented, and generic?\n- [ ] Is a thorough test harness present (both unit and integration tests)?","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/dharmaprotocol/charta/issues/4","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x2987Aa227df48D4891b3FE667C7A0c463F8857b1","arbiter":"0x0000000000000000000000000000000000000000","balance":70000000000000010,"network":"mainnet","deadline":1549010723,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":70000000000000010},"metadata":{"fullName":"Nadav Hollander","tokenName":"ETH","bountyType":"","issueTitle":"FR: Collateralized Base Contract for Terms Contracts","issueKeywords":"charta, dharmaprotocol, TypeScript, Solidity, HTML, JavaScript","projectLength":"Unknown","githubUsername":"nadavhollander","experienceLevel":"","issueDescription":"## Feature Request: \n\nCreate a generic base contract under the `contracts/examples/` folder for holding tokens of different types as collateral in a Dharma terms contract that inherits from the contract.  In the ideal case, I'd love to see a `Collateralized.sol` file with usage akin to [OpenZeppelin's](https://github.com/OpenZeppelin/zeppelin-solidity) `Owned.sol` or `Pausable.sol`, i.e.\n\n```solidity\nimport \"charta/contracts/examples/Collateralized.sol\";\nimport \"charta/contracts/Terms.sol\";\n\ncontract CompoundInterestTermsContract is TermsContract, Collateralized {\n\n...\n\n}\n```\n\n## Specification:\n\nThe flow for collateralizing an asset should be as follows:\n\n1. User grants `transferFrom` allowance for desired collateral amount on desired collateral token to the TermsContract that inherits from `Collateralized.sol` (using the ERC20 `approve` method)\n2. User calls `collateralize(bytes32 issuanceCommitmentHash, address token, uint amount, uint lockupPeriodEndBlockNumber)`.  Terms contract then transfers itself the desired collateral, and records all relevant information (including the user-defined `lockupPeriodEndBlockNumber`) as associated with the given `issuanceCommitmentHash`.\n\nAfter an asset has been collateralized one of the following can happen:\n\n- When `block.number > lockupPeriodEndBlockNumber`, any user can call `returnCollateral`, and the contract will transfer the debtor back the collateral (if it hasn't already been seized)\n- When, at **any** time, `getExpectedRepaymentValue() > getValueRepaid()` on the TermsContract that inherits from `Collateralized.sol`, any user can call `seizeCollateral`, and the contract will transfer the collateral to the debt agreement's beneficiary.\n\n## Acceptance Criteria\n- [ ] Is the contract clean, well-documented, and generic?\n- [ ] Is a thorough test harness present (both unit and integration tests)?","notificationEmail":"nadav@dharma.io"},"current_bounty":true,"value_in_eth":7.000000000000001e+16,"token_value_in_usdt":607.66,"value_in_usdt":42.54,"status":"open","now":"2018-03-16T06:17:03.536658Z","avatar_url":"https://avatars3.githubusercontent.com/u/28667653?v=4","value_true":0.07,"issue_description":"## Feature Request: \r\n\r\nCreate a generic base contract under the `contracts/examples/` folder for holding tokens of different types as collateral in a Dharma terms contract that inherits from the contract.  In the ideal case, I'd love to see a `Collateralized.sol` file with usage akin to [OpenZeppelin's](https://github.com/OpenZeppelin/zeppelin-solidity) `Owned.sol` or `Pausable.sol`, i.e.\r\n\r\n```solidity\r\nimport \"charta/contracts/examples/Collateralized.sol\";\r\nimport \"charta/contracts/Terms.sol\";\r\n\r\ncontract CompoundInterestTermsContract is TermsContract, Collateralized {\r\n\r\n...\r\n\r\n}\r\n```\r\n\r\n## Specification:\r\n\r\nThe flow for collateralizing an asset should be as follows:\r\n\r\n1. User grants `transferFrom` allowance for desired collateral amount on desired collateral token to the TermsContract that inherits from `Collateralized.sol` (using the ERC20 `approve` method)\r\n2. User calls `collateralize(bytes32 issuanceCommitmentHash, address token, uint amount, uint lockupPeriodEndBlockNumber)`.  Terms contract then transfers itself the desired collateral, and records all relevant information (including the user-defined `lockupPeriodEndBlockNumber`) as associated with the given `issuanceCommitmentHash`.\r\n\r\nAfter an asset has been collateralized one of the following can happen:\r\n\r\n- When `block.number > lockupPeriodEndBlockNumber`, any user can call `returnCollateral`, and the contract will transfer the debtor back the collateral (if it hasn't already been seized)\r\n- When, at **any** time, `getExpectedRepaymentValue() > getValueRepaid()` on the TermsContract that inherits from `Collateralized.sol`, any user can call `seizeCollateral`, and the contract will transfer the collateral to the debt agreement's beneficiary.\r\n\r\n## Acceptance Criteria\r\n- [ ] Is the contract clean, well-documented, and generic?\r\n- [ ] Is a thorough test harness present (both unit and integration tests)?","network":"mainnet","org_name":"dharmaprotocol","pk":1335,"issue_description_text":"## Feature Request: \r\n\r\nCreate a generic base contract under the `contracts/examples/` folder for holding tokens of different types as collateral in a Dharma terms contract that inherits from the contract.  In the ideal case, I'd love to see a `Collateralized.sol` file with usage akin to [OpenZeppelin's](https://github.com/OpenZeppelin/zeppelin-solidity) `Owned.sol` or `Pausable.sol`, i.e.\r\n\r\n```solidity\r\nimport \"charta/contracts/examples/Collateralized.sol\";\r\nimport \"charta/contracts/Terms.sol\";\r\n\r\ncontract CompoundInterestTermsContract is TermsContract, Collateralized {\r\n\r\n...\r\n\r\n}\r\n```\r\n\r\n## Specification:\r\n\r\nThe flow for collateralizing an asset should be as follows:\r\n\r\n1. User grants `transferFrom` allowance for desired collateral amount on desired collateral token to the TermsContract that inherits from `Collateralized.sol` (using the ERC20 `approve` method)\r\n2. User calls `collateralize(bytes32 issuanceCommitmentHash, address token, uint amount, uint lockupPeriodEndBlockNumber)`.  Terms contract then transfers itself the desired collateral, and records all relevant information (including the user-defined `lockupPeriodEndBlockNumber`) as associated with the given `issuanceCommitmentHash`.\r\n\r\nAfter an asset has been collateralized one of the following can happen:\r\n\r\n- When `block.number > lockupPeriodEndBlockNumber`, any user can call `returnCollateral`, and the contract will transfer the debtor back the collateral (if it hasn't already been seized)\r\n- When, at **any** time, `getExpectedRepaymentValue() > getValueRepaid()` on the TermsContract that inherits from `Collateralized.sol`, any user can call `seizeCollateral`, and the contract will transfer the collateral to the debt agreement's beneficiary.\r\n\r\n## Acceptance Criteria\r\n- [ ] Is the contract clean, well-documented, and generic?\r\n- [ ] Is a thorough test harness present (both unit and integration tests)?","standard_bounties_id":21,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/web/408","created_on":"2018-02-20T15:02:44.724936-07:00","modified_on":"2018-03-15T23:15:11.190110-07:00","title":"Increase Code Coverage by 5%","web3_created":"2018-02-13T05:55:23-07:00","value_in_token":"55500000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Advanced","github_url":"https://github.com/gitcoinco/web/issues/408","github_comments":7,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-05-14T05:55:23-07:00","raw_data":{"id":37,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Increase Code Coverage by 5%","issuer":{"name":"","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1518551723,"funders":[],"metadata":{"fullName":"","tokenName":"ETH","bountyType":"Feature","issueTitle":"Increase Code Coverage by 5%","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Advanced","issueDescription":"This bounty will be paid out to anyone who meaningfully increases the code coverage of the repository by 5%.  \n\nCriteria:  \n* You must increase the code coverage (as measured by codecov) of this repo by 5%.\n* You must put (show) some thought into success / failure criteria for each method tested.\n* Please coordinate with other bounty hunters who are working on this bounty so you don't overlap work.","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["web"," gitcoinco"," JavaScript"," Python"," HTML"," CSS"],"description":"This bounty will be paid out to anyone who meaningfully increases the code coverage of the repository by 5%.  \n\nCriteria:  \n* You must increase the code coverage (as measured by codecov) of this repo by 5%.\n* You must put (show) some thought into success / failure criteria for each method tested.\n* Please coordinate with other bounty hunters who are working on this bounty so you don't overlap work.","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/web/issues/408","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":55500000000000000,"network":"mainnet","deadline":1526327723,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":55500000000000000},"metadata":{"fullName":"","tokenName":"ETH","bountyType":"Feature","issueTitle":"Increase Code Coverage by 5%","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Advanced","issueDescription":"This bounty will be paid out to anyone who meaningfully increases the code coverage of the repository by 5%.  \n\nCriteria:  \n* You must increase the code coverage (as measured by codecov) of this repo by 5%.\n* You must put (show) some thought into success / failure criteria for each method tested.\n* Please coordinate with other bounty hunters who are working on this bounty so you don't overlap work.","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":5.55e+16,"token_value_in_usdt":607.66,"value_in_usdt":33.73,"status":"open","now":"2018-03-16T06:17:03.540096Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.0555,"issue_description":"This bounty will be paid out to anyone who meaningfully increases the code coverage of the repository by 5%.  \r\n\r\nCriteria:  \r\n* You must increase the code coverage (as measured by codecov) of this repo by 5%.\r\n* You must put (show) some thought into success / failure criteria for each method tested.\r\n* Please coordinate with other bounty hunters who are working on this bounty so you don't overlap work.\r\n","network":"mainnet","org_name":"gitcoinco","pk":1352,"issue_description_text":"This bounty will be paid out to anyone who meaningfully increases the code coverage of the repository by 5%.  \r\n\r\nCriteria:  \r\n* You must increase the code coverage (as measured by codecov) of this repo by 5%.\r\n* You must put (show) some thought into success / failure criteria for each method tested.\r\n* Please coordinate with other bounty hunters who are working on this bounty so you don't overlap work.","standard_bounties_id":37,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/web/445","created_on":"2018-02-20T15:02:54.235704-07:00","modified_on":"2018-03-15T23:15:09.572877-07:00","title":"better bounds checking in kill/submit/accept bounty","web3_created":"2018-02-14T04:17:16-07:00","value_in_token":"90000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Advanced","github_url":"https://github.com/gitcoinco/web/issues/445","github_comments":6,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-05-15T04:17:16-07:00","raw_data":{"id":40,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"better bounds checking in kill/submit/accept bounty","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1518632236,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"better bounds checking in kill/submit/accept bounty","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Advanced","issueDescription":"# what\n\nright now, we don't do a great job of bounds checking in the follow places :\n\n## surface area:\n1. kill bounty\n2. submit bounty\n3. accept bounty\n\nif you fail to meet the boundary conditions , youll see a nasty metamask module that shows you using up too much gas : http://bits.owocki.com/0h1R3J3r1j1w\n\n# current functionality\n\nupon form submission on these pages, metamask will show this module, which shows that theres too much gas being used: http://bits.owocki.com/0h1R3J3r1j1w\n\n# desired functionality\n\nupon form submission on these pages,  an `_alert` is shown telling the user what bounds they crossed\n\n# bounds conditions to check\n1. try to submit work on an issue you are the funder\n2. you submit work on an issue that is on a different network than you (mainnet vs rinkeby)\n3. any other conditions enforced in [StandardBounties](https://github.com/ConsenSys/StandardBounties/)","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["web"," gitcoinco"," JavaScript"," Python"," HTML"," CSS"],"description":"# what\n\nright now, we don't do a great job of bounds checking in the follow places :\n\n## surface area:\n1. kill bounty\n2. submit bounty\n3. accept bounty\n\nif you fail to meet the boundary conditions , youll see a nasty metamask module that shows you using up too much gas : http://bits.owocki.com/0h1R3J3r1j1w\n\n# current functionality\n\nupon form submission on these pages, metamask will show this module, which shows that theres too much gas being used: http://bits.owocki.com/0h1R3J3r1j1w\n\n# desired functionality\n\nupon form submission on these pages,  an `_alert` is shown telling the user what bounds they crossed\n\n# bounds conditions to check\n1. try to submit work on an issue you are the funder\n2. you submit work on an issue that is on a different network than you (mainnet vs rinkeby)\n3. any other conditions enforced in [StandardBounties](https://github.com/ConsenSys/StandardBounties/)","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/web/issues/445","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":90000000000000000,"network":"mainnet","deadline":1526408236,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":90000000000000000},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"better bounds checking in kill/submit/accept bounty","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Advanced","issueDescription":"# what\n\nright now, we don't do a great job of bounds checking in the follow places :\n\n## surface area:\n1. kill bounty\n2. submit bounty\n3. accept bounty\n\nif you fail to meet the boundary conditions , youll see a nasty metamask module that shows you using up too much gas : http://bits.owocki.com/0h1R3J3r1j1w\n\n# current functionality\n\nupon form submission on these pages, metamask will show this module, which shows that theres too much gas being used: http://bits.owocki.com/0h1R3J3r1j1w\n\n# desired functionality\n\nupon form submission on these pages,  an `_alert` is shown telling the user what bounds they crossed\n\n# bounds conditions to check\n1. try to submit work on an issue you are the funder\n2. you submit work on an issue that is on a different network than you (mainnet vs rinkeby)\n3. any other conditions enforced in [StandardBounties](https://github.com/ConsenSys/StandardBounties/)","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":9e+16,"token_value_in_usdt":607.66,"value_in_usdt":54.69,"status":"open","now":"2018-03-16T06:17:03.543811Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.09,"issue_description":"# what\r\n\r\nright now, we don't do a great job of bounds checking in the follow places :\r\n\r\n## surface area:\r\n1. kill bounty\r\n2. submit bounty\r\n3. accept bounty\r\n\r\nif you fail to meet the boundary conditions , youll see a nasty metamask module that shows you using up too much gas : http://bits.owocki.com/0h1R3J3r1j1w\r\n\r\n# current functionality\r\n\r\nupon form submission on these pages, metamask will show this module, which shows that theres too much gas being used: http://bits.owocki.com/0h1R3J3r1j1w\r\n\r\n# desired functionality\r\n\r\nupon form submission on these pages,  an `_alert` is shown telling the user what bounds they crossed (the most common one is likely to be that the bounty has expired)\r\n\r\nexample error message: \"Error: Cannot submit bounty as it has expired. Please contact bounty submitter directly to resolve.\"\r\n\r\n# bounds conditions to check\r\n1. try to submit work on an issue you are the funder\r\n2. you submit work on an issue that is on a different network than you (mainnet vs rinkeby)\r\n3. any other conditions enforced in [StandardBounties](https://github.com/ConsenSys/StandardBounties/)\r\n4. network of bounty != network that the users current metamask instance is on\r\n\r\n\r\n","network":"mainnet","org_name":"gitcoinco","pk":1355,"issue_description_text":"# what\r\n\r\nright now, we don't do a great job of bounds checking in the follow places :\r\n\r\n## surface area:\r\n1. kill bounty\r\n2. submit bounty\r\n3. accept bounty\r\n\r\nif you fail to meet the boundary conditions , youll see a nasty metamask module that shows you using up too much gas : http://bits.owocki.com/0h1R3J3r1j1w\r\n\r\n# current functionality\r\n\r\nupon form submission on these pages, metamask will show this module, which shows that theres too much gas being used: http://bits.owocki.com/0h1R3J3r1j1w\r\n\r\n# desired functionality\r\n\r\nupon form submission on these pages,  an `_alert` is shown telling the user what bounds they crossed (the most common one is likely to be that the bounty has expired)\r\n\r\nexample error message: \"Error: Cannot submit bounty as it has expired. Please contact bounty submitter directly to resolve.\"\r\n\r\n# bounds conditions to check\r\n1. try to submit work on an issue you are the funder\r\n2. you submit work on an issue that is on a different network than you (mainnet vs rinkeby)\r\n3. any other conditions enforced in [StandardBounties](https://github.com/ConsenSys/StandardBounties/)\r\n4. network of bounty != network that the users current metamask instance is on","standard_bounties_id":40,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/MetaMask/metamask-extension/3249","created_on":"2018-02-20T15:02:57.699009-07:00","modified_on":"2018-03-15T23:15:24.100952-07:00","title":"Create visually customizable keyring format","web3_created":"2018-02-14T05:25:01-07:00","value_in_token":"1100000000000000100.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Advanced","github_url":"https://github.com/MetaMask/metamask-extension/issues/3249","github_comments":7,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-05-15T05:25:01-07:00","raw_data":{"id":42,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Create visually customizable keyring format","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1518636301,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"Create visually customizable keyring format","issueKeywords":"metamask-extension, MetaMask, JavaScript, CSS, HTML","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Advanced","issueDescription":"Opening for discussion, to hone the approach and criteria for the goal of allowing arbitrary signers to be added to MetaMask.\n\nExtending from #328, but adding a visual component. The related design issue is #731. This could be done in parallel with #731 as long as it was kept design-agnostic.\n\nBlocking #717, #605, #716.\n\n# MetaMask Mutli-Signer Acceptance Criteria\n\nAn Aspect of MetaMask that has waited far too long is our ability to support multiple signing strategies. At time of writing, MetaMask only accepts two types of signer (both key pairs), the 12-word mnemonic, and the imported private key.\n\nGoing forward, MetaMask strives to allow users to sign blockchain transactions representing any of a multitude of strategies, including:\n\n- Hardware Wallets (Ledger, Trezor, Firefly)\n- Offline Signers (copy the params, paste the signed tx, or all QR codes?)\n- Contract Based Accounts (Multi Sig, uPort, 2FA, etc)\n- Remote/Hosted signers (Imagine if Coinbase signed as a service)\n\n## The Keyring Class\n\nOur initial effort towards this end was defining [The Keyring Class](https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol), a JavaScript protocol that objects can adhere to, and be added to MetaMask as new signing strategies.\n\nWhat we never added to the Keyring protocol was a notion of custom signing views, which would definitely be necessary for things like offline signers or contract based accounts, since these might have options, preferences, and parameters that only relate to that view itself.\n\n## The Work To Go\n\nThis work would be composed of several sub-features, which should stem from our New UI work, which currently lives on the `uat` branch (hopefully to merge this week and deploy next).\n\nA complete implementation of this platform would be to implement a single minimum-viable new signing strategy (like the Ledger, or an offline signer with custom UI). The exact signer would not be as important as the platform's easy extensibility.\n\nThe roadmap would roughly include:\n\n- The account list should group by Keyring, with headers.\n- The `import account` view should list a new signer type.\n- That new signer import screen should include whatever that signer requires to set up. (Opening in new tab is probably a good idea for a complex form).\n- When an account from that signer is selected, and a transaction is proposed, this signer would get to provide its own confirmation screen/view.\n\n## Confirmation View Considerations\n\nThe confirmation view itself is not perfectly defined. Currently our confirmation screen strives to provide all info that the user needs to approve a signature, and no other action is required, since MetaMask holds those keys.\n\nFor something like a hardware wallet, it is easy to imagine that a subsequent screen or series of steps could be provided after this confirmation screen, and this might be acceptable for only adding Ledger support, but other signers have other requirements!\n\nConsider a multi-sig or contract account. The confirmation screen in this scenario would need to refer to either:\n- The transaction the user intends to send\n- The transaction to their contract account, which will then proxy that other transaction.\n\nSince the former is the one that is intelliglbe to the user, we might prefer to show this by default, but since the latter would show the gas parameters that are actually relevant to the user, it is clear that the actual confirmation screen for a contract account would need to be some kind of fusion.\n\nFor this reason, custom confirmation screens and flows probably need to be (at least an optional) customization provided by new Keychains.\n\n## Signer Composability\n\nThe last major criteria, and some might argue whether it is truly a requirement, would be signer composability. This is the notion that some signers might require another signer to sign, and so MetaMask could empower these signers greatly by providing the user options of how to compose their signers.\n\nFor example, in the case of a multi-sig wallet, a user might add a contract account which will forward any transaction which includes a signature from two of its authorized keys. The user might hold one key on their phone, and one key on their computer.\n\nThis detail could be left to the custom signer, and as a minimum viable product, that might be what we agree to do. However, what if the user wants their local key to be a hardware wallet? In this case, the user wants to use a contract account, which might impose a spending limit, and they only want to keep their keys on a hardware device. I don't think we should expect each contract wallet keyring author to implement their own hardware wallet support, and so MetaMask could offer some powerful leverage for contract wallets by allowing signers to be arbitrarily composed.\n\nIn the most complicated case, this might mean a hardware wallet is authorized to sign fot a contract identity which is authorized to sign for a multi-sig account.\n\nI know, this may be premature optimization, and we can definitely ship smaller pieces sooner, but I think keeping a consideration for this long-term path could help our architecture stay flexible going forward, because I think signer composability is eventually going to be an obviously desired feature; People will want to browse web3 sites on behalf of organizations that they are part of, and they will want to propose transactions to that organization, and they will propose those transactions from their uPort identities (contract accounts), which they will likely authorize from their phones or hardware devices.\n\n## Acceptable Formats\n\nIdeally, Keyrings themselves can be defined within a specified bundle or module, paving the way for a \"signer store\", so that eventually we can further abstract the job of selecting signers away from the core codebase to whatever mechanism we agree is the most secure and usable.","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["metamask-extension"," MetaMask"," JavaScript"," CSS"," HTML"],"description":"Opening for discussion, to hone the approach and criteria for the goal of allowing arbitrary signers to be added to MetaMask.\n\nExtending from #328, but adding a visual component. The related design issue is #731. This could be done in parallel with #731 as long as it was kept design-agnostic.\n\nBlocking #717, #605, #716.\n\n# MetaMask Mutli-Signer Acceptance Criteria\n\nAn Aspect of MetaMask that has waited far too long is our ability to support multiple signing strategies. At time of writing, MetaMask only accepts two types of signer (both key pairs), the 12-word mnemonic, and the imported private key.\n\nGoing forward, MetaMask strives to allow users to sign blockchain transactions representing any of a multitude of strategies, including:\n\n- Hardware Wallets (Ledger, Trezor, Firefly)\n- Offline Signers (copy the params, paste the signed tx, or all QR codes?)\n- Contract Based Accounts (Multi Sig, uPort, 2FA, etc)\n- Remote/Hosted signers (Imagine if Coinbase signed as a service)\n\n## The Keyring Class\n\nOur initial effort towards this end was defining [The Keyring Class](https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol), a JavaScript protocol that objects can adhere to, and be added to MetaMask as new signing strategies.\n\nWhat we never added to the Keyring protocol was a notion of custom signing views, which would definitely be necessary for things like offline signers or contract based accounts, since these might have options, preferences, and parameters that only relate to that view itself.\n\n## The Work To Go\n\nThis work would be composed of several sub-features, which should stem from our New UI work, which currently lives on the `uat` branch (hopefully to merge this week and deploy next).\n\nA complete implementation of this platform would be to implement a single minimum-viable new signing strategy (like the Ledger, or an offline signer with custom UI). The exact signer would not be as important as the platform's easy extensibility.\n\nThe roadmap would roughly include:\n\n- The account list should group by Keyring, with headers.\n- The `import account` view should list a new signer type.\n- That new signer import screen should include whatever that signer requires to set up. (Opening in new tab is probably a good idea for a complex form).\n- When an account from that signer is selected, and a transaction is proposed, this signer would get to provide its own confirmation screen/view.\n\n## Confirmation View Considerations\n\nThe confirmation view itself is not perfectly defined. Currently our confirmation screen strives to provide all info that the user needs to approve a signature, and no other action is required, since MetaMask holds those keys.\n\nFor something like a hardware wallet, it is easy to imagine that a subsequent screen or series of steps could be provided after this confirmation screen, and this might be acceptable for only adding Ledger support, but other signers have other requirements!\n\nConsider a multi-sig or contract account. The confirmation screen in this scenario would need to refer to either:\n- The transaction the user intends to send\n- The transaction to their contract account, which will then proxy that other transaction.\n\nSince the former is the one that is intelliglbe to the user, we might prefer to show this by default, but since the latter would show the gas parameters that are actually relevant to the user, it is clear that the actual confirmation screen for a contract account would need to be some kind of fusion.\n\nFor this reason, custom confirmation screens and flows probably need to be (at least an optional) customization provided by new Keychains.\n\n## Signer Composability\n\nThe last major criteria, and some might argue whether it is truly a requirement, would be signer composability. This is the notion that some signers might require another signer to sign, and so MetaMask could empower these signers greatly by providing the user options of how to compose their signers.\n\nFor example, in the case of a multi-sig wallet, a user might add a contract account which will forward any transaction which includes a signature from two of its authorized keys. The user might hold one key on their phone, and one key on their computer.\n\nThis detail could be left to the custom signer, and as a minimum viable product, that might be what we agree to do. However, what if the user wants their local key to be a hardware wallet? In this case, the user wants to use a contract account, which might impose a spending limit, and they only want to keep their keys on a hardware device. I don't think we should expect each contract wallet keyring author to implement their own hardware wallet support, and so MetaMask could offer some powerful leverage for contract wallets by allowing signers to be arbitrarily composed.\n\nIn the most complicated case, this might mean a hardware wallet is authorized to sign fot a contract identity which is authorized to sign for a multi-sig account.\n\nI know, this may be premature optimization, and we can definitely ship smaller pieces sooner, but I think keeping a consideration for this long-term path could help our architecture stay flexible going forward, because I think signer composability is eventually going to be an obviously desired feature; People will want to browse web3 sites on behalf of organizations that they are part of, and they will want to propose transactions to that organization, and they will propose those transactions from their uPort identities (contract accounts), which they will likely authorize from their phones or hardware devices.\n\n## Acceptable Formats\n\nIdeally, Keyrings themselves can be defined within a specified bundle or module, paving the way for a \"signer store\", so that eventually we can further abstract the job of selecting signers away from the core codebase to whatever mechanism we agree is the most secure and usable.","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/MetaMask/metamask-extension/issues/3249","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":1100000000000000100,"network":"mainnet","deadline":1526412301,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":1100000000000000100},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"Create visually customizable keyring format","issueKeywords":"metamask-extension, MetaMask, JavaScript, CSS, HTML","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Advanced","issueDescription":"Opening for discussion, to hone the approach and criteria for the goal of allowing arbitrary signers to be added to MetaMask.\n\nExtending from #328, but adding a visual component. The related design issue is #731. This could be done in parallel with #731 as long as it was kept design-agnostic.\n\nBlocking #717, #605, #716.\n\n# MetaMask Mutli-Signer Acceptance Criteria\n\nAn Aspect of MetaMask that has waited far too long is our ability to support multiple signing strategies. At time of writing, MetaMask only accepts two types of signer (both key pairs), the 12-word mnemonic, and the imported private key.\n\nGoing forward, MetaMask strives to allow users to sign blockchain transactions representing any of a multitude of strategies, including:\n\n- Hardware Wallets (Ledger, Trezor, Firefly)\n- Offline Signers (copy the params, paste the signed tx, or all QR codes?)\n- Contract Based Accounts (Multi Sig, uPort, 2FA, etc)\n- Remote/Hosted signers (Imagine if Coinbase signed as a service)\n\n## The Keyring Class\n\nOur initial effort towards this end was defining [The Keyring Class](https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol), a JavaScript protocol that objects can adhere to, and be added to MetaMask as new signing strategies.\n\nWhat we never added to the Keyring protocol was a notion of custom signing views, which would definitely be necessary for things like offline signers or contract based accounts, since these might have options, preferences, and parameters that only relate to that view itself.\n\n## The Work To Go\n\nThis work would be composed of several sub-features, which should stem from our New UI work, which currently lives on the `uat` branch (hopefully to merge this week and deploy next).\n\nA complete implementation of this platform would be to implement a single minimum-viable new signing strategy (like the Ledger, or an offline signer with custom UI). The exact signer would not be as important as the platform's easy extensibility.\n\nThe roadmap would roughly include:\n\n- The account list should group by Keyring, with headers.\n- The `import account` view should list a new signer type.\n- That new signer import screen should include whatever that signer requires to set up. (Opening in new tab is probably a good idea for a complex form).\n- When an account from that signer is selected, and a transaction is proposed, this signer would get to provide its own confirmation screen/view.\n\n## Confirmation View Considerations\n\nThe confirmation view itself is not perfectly defined. Currently our confirmation screen strives to provide all info that the user needs to approve a signature, and no other action is required, since MetaMask holds those keys.\n\nFor something like a hardware wallet, it is easy to imagine that a subsequent screen or series of steps could be provided after this confirmation screen, and this might be acceptable for only adding Ledger support, but other signers have other requirements!\n\nConsider a multi-sig or contract account. The confirmation screen in this scenario would need to refer to either:\n- The transaction the user intends to send\n- The transaction to their contract account, which will then proxy that other transaction.\n\nSince the former is the one that is intelliglbe to the user, we might prefer to show this by default, but since the latter would show the gas parameters that are actually relevant to the user, it is clear that the actual confirmation screen for a contract account would need to be some kind of fusion.\n\nFor this reason, custom confirmation screens and flows probably need to be (at least an optional) customization provided by new Keychains.\n\n## Signer Composability\n\nThe last major criteria, and some might argue whether it is truly a requirement, would be signer composability. This is the notion that some signers might require another signer to sign, and so MetaMask could empower these signers greatly by providing the user options of how to compose their signers.\n\nFor example, in the case of a multi-sig wallet, a user might add a contract account which will forward any transaction which includes a signature from two of its authorized keys. The user might hold one key on their phone, and one key on their computer.\n\nThis detail could be left to the custom signer, and as a minimum viable product, that might be what we agree to do. However, what if the user wants their local key to be a hardware wallet? In this case, the user wants to use a contract account, which might impose a spending limit, and they only want to keep their keys on a hardware device. I don't think we should expect each contract wallet keyring author to implement their own hardware wallet support, and so MetaMask could offer some powerful leverage for contract wallets by allowing signers to be arbitrarily composed.\n\nIn the most complicated case, this might mean a hardware wallet is authorized to sign fot a contract identity which is authorized to sign for a multi-sig account.\n\nI know, this may be premature optimization, and we can definitely ship smaller pieces sooner, but I think keeping a consideration for this long-term path could help our architecture stay flexible going forward, because I think signer composability is eventually going to be an obviously desired feature; People will want to browse web3 sites on behalf of organizations that they are part of, and they will want to propose transactions to that organization, and they will propose those transactions from their uPort identities (contract accounts), which they will likely authorize from their phones or hardware devices.\n\n## Acceptable Formats\n\nIdeally, Keyrings themselves can be defined within a specified bundle or module, paving the way for a \"signer store\", so that eventually we can further abstract the job of selecting signers away from the core codebase to whatever mechanism we agree is the most secure and usable.","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":1.1000000000000001e+18,"token_value_in_usdt":607.66,"value_in_usdt":668.43,"status":"open","now":"2018-03-16T06:17:03.547156Z","avatar_url":"https://avatars2.githubusercontent.com/u/11744586?v=4","value_true":1.1,"issue_description":"Opening for discussion, to hone the approach and criteria for the goal of allowing arbitrary signers to be added to MetaMask.\r\n\r\nExtending from #328, but adding a visual component. The related design issue is #731. This could be done in parallel with #731 as long as it was kept design-agnostic.\r\n\r\nBlocking #717, #605, #716.\r\n\r\n# MetaMask Mutli-Signer Acceptance Criteria\r\n\r\nAn Aspect of MetaMask that has waited far too long is our ability to support multiple signing strategies. At time of writing, MetaMask only accepts two types of signer (both key pairs), the 12-word mnemonic, and the imported private key.\r\n\r\nGoing forward, MetaMask strives to allow users to sign blockchain transactions representing any of a multitude of strategies, including:\r\n\r\n- Hardware Wallets (Ledger, Trezor, Firefly)\r\n- Offline Signers (copy the params, paste the signed tx, or all QR codes?)\r\n- Contract Based Accounts (Multi Sig, uPort, 2FA, etc)\r\n- Remote/Hosted signers (Imagine if Coinbase signed as a service)\r\n\r\n## The Keyring Class\r\n\r\nOur initial effort towards this end was defining [The Keyring Class](https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol), a JavaScript protocol that objects can adhere to, and be added to MetaMask as new signing strategies.\r\n\r\nWhat we never added to the Keyring protocol was a notion of custom signing views, which would definitely be necessary for things like offline signers or contract based accounts, since these might have options, preferences, and parameters that only relate to that view itself.\r\n\r\n## The Work To Go\r\n\r\nThis work would be composed of several sub-features, which should stem from our New UI work, which currently lives on the `uat` branch (hopefully to merge this week and deploy next).\r\n\r\nA complete implementation of this platform would be to implement a single minimum-viable new signing strategy (like the Ledger, or an offline signer with custom UI). The exact signer would not be as important as the platform's easy extensibility.\r\n\r\nThe roadmap would roughly include:\r\n\r\n- The account list should group by Keyring, with headers.\r\n- The `import account` view should list a new signer type.\r\n- That new signer import screen should include whatever that signer requires to set up. (Opening in new tab is probably a good idea for a complex form).\r\n- When an account from that signer is selected, and a transaction is proposed, this signer would get to provide its own confirmation screen/view.\r\n\r\n## Confirmation View Considerations\r\n\r\nThe confirmation view itself is not perfectly defined. Currently our confirmation screen strives to provide all info that the user needs to approve a signature, and no other action is required, since MetaMask holds those keys.\r\n\r\nFor something like a hardware wallet, it is easy to imagine that a subsequent screen or series of steps could be provided after this confirmation screen, and this might be acceptable for only adding Ledger support, but other signers have other requirements!\r\n\r\nConsider a multi-sig or contract account. The confirmation screen in this scenario would need to refer to either:\r\n- The transaction the user intends to send\r\n- The transaction to their contract account, which will then proxy that other transaction.\r\n\r\nSince the former is the one that is intelliglbe to the user, we might prefer to show this by default, but since the latter would show the gas parameters that are actually relevant to the user, it is clear that the actual confirmation screen for a contract account would need to be some kind of fusion.\r\n\r\nFor this reason, custom confirmation screens and flows probably need to be (at least an optional) customization provided by new Keychains.\r\n\r\n## Signer Composability\r\n\r\nThe last major criteria, and some might argue whether it is truly a requirement, would be signer composability. This is the notion that some signers might require another signer to sign, and so MetaMask could empower these signers greatly by providing the user options of how to compose their signers.\r\n\r\nFor example, in the case of a multi-sig wallet, a user might add a contract account which will forward any transaction which includes a signature from two of its authorized keys. The user might hold one key on their phone, and one key on their computer.\r\n\r\nThis detail could be left to the custom signer, and as a minimum viable product, that might be what we agree to do. However, what if the user wants their local key to be a hardware wallet? In this case, the user wants to use a contract account, which might impose a spending limit, and they only want to keep their keys on a hardware device. I don't think we should expect each contract wallet keyring author to implement their own hardware wallet support, and so MetaMask could offer some powerful leverage for contract wallets by allowing signers to be arbitrarily composed.\r\n\r\nIn the most complicated case, this might mean a hardware wallet is authorized to sign fot a contract identity which is authorized to sign for a multi-sig account.\r\n\r\nI know, this may be premature optimization, and we can definitely ship smaller pieces sooner, but I think keeping a consideration for this long-term path could help our architecture stay flexible going forward, because I think signer composability is eventually going to be an obviously desired feature; People will want to browse web3 sites on behalf of organizations that they are part of, and they will want to propose transactions to that organization, and they will propose those transactions from their uPort identities (contract accounts), which they will likely authorize from their phones or hardware devices.\r\n\r\n## Acceptable Formats\r\n\r\nIdeally, Keyrings themselves can be defined within a specified bundle or module, paving the way for a \"signer store\", so that eventually we can further abstract the job of selecting signers away from the core codebase to whatever mechanism we agree is the most secure and usable.","network":"mainnet","org_name":"MetaMask","pk":1357,"issue_description_text":"Opening for discussion, to hone the approach and criteria for the goal of allowing arbitrary signers to be added to MetaMask.\r\n\r\nExtending from #328, but adding a visual component. The related design issue is #731. This could be done in parallel with #731 as long as it was kept design-agnostic.\r\n\r\nBlocking #717, #605, #716.\r\n\r\n# MetaMask Mutli-Signer Acceptance Criteria\r\n\r\nAn Aspect of MetaMask that has waited far too long is our ability to support multiple signing strategies. At time of writing, MetaMask only accepts two types of signer (both key pairs), the 12-word mnemonic, and the imported private key.\r\n\r\nGoing forward, MetaMask strives to allow users to sign blockchain transactions representing any of a multitude of strategies, including:\r\n\r\n- Hardware Wallets (Ledger, Trezor, Firefly)\r\n- Offline Signers (copy the params, paste the signed tx, or all QR codes?)\r\n- Contract Based Accounts (Multi Sig, uPort, 2FA, etc)\r\n- Remote/Hosted signers (Imagine if Coinbase signed as a service)\r\n\r\n## The Keyring Class\r\n\r\nOur initial effort towards this end was defining [The Keyring Class](https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol), a JavaScript protocol that objects can adhere to, and be added to MetaMask as new signing strategies.\r\n\r\nWhat we never added to the Keyring protocol was a notion of custom signing views, which would definitely be necessary for things like offline signers or contract based accounts, since these might have options, preferences, and parameters that only relate to that view itself.\r\n\r\n## The Work To Go\r\n\r\nThis work would be composed of several sub-features, which should stem from our New UI work, which currently lives on the `uat` branch (hopefully to merge this week and deploy next).\r\n\r\nA complete implementation of this platform would be to implement a single minimum-viable new signing strategy (like the Ledger, or an offline signer with custom UI). The exact signer would not be as important as the platform's easy extensibility.\r\n\r\nThe roadmap would roughly include:\r\n\r\n- The account list should group by Keyring, with headers.\r\n- The `import account` view should list a new signer type.\r\n- That new signer import screen should include whatever that signer requires to set up. (Opening in new tab is probably a good idea for a complex form).\r\n- When an account from that signer is selected, and a transaction is proposed, this signer would get to provide its own confirmation screen/view.\r\n\r\n## Confirmation View Considerations\r\n\r\nThe confirmation view itself is not perfectly defined. Currently our confirmation screen strives to provide all info that the user needs to approve a signature, and no other action is required, since MetaMask holds those keys.\r\n\r\nFor something like a hardware wallet, it is easy to imagine that a subsequent screen or series of steps could be provided after this confirmation screen, and this might be acceptable for only adding Ledger support, but other signers have other requirements!\r\n\r\nConsider a multi-sig or contract account. The confirmation screen in this scenario would need to refer to either:\r\n- The transaction the user intends to send\r\n- The transaction to their contract account, which will then proxy that other transaction.\r\n\r\nSince the former is the one that is intelliglbe to the user, we might prefer to show this by default, but since the latter would show the gas parameters that are actually relevant to the user, it is clear that the actual confirmation screen for a contract account would need to be some kind of fusion.\r\n\r\nFor this reason, custom confirmation screens and flows probably need to be (at least an optional) customization provided by new Keychains.\r\n\r\n## Signer Composability\r\n\r\nThe last major criteria, and some might argue whether it is truly a requirement, would be signer composability. This is the notion that some signers might require another signer to sign, and so MetaMask could empower these signers greatly by providing the user options of how to compose their signers.\r\n\r\nFor example, in the case of a multi-sig wallet, a user might add a contract account which will forward any transaction which includes a signature from two of its authorized keys. The user might hold one key on their phone, and one key on their computer.\r\n\r\nThis detail could be left to the custom signer, and as a minimum viable product, that might be what we agree to do. However, what if the user wants their local key to be a hardware wallet? In this case, the user wants to use a contract account, which might impose a spending limit, and they only want to keep their keys on a hardware device. I don't think we should expect each contract wallet keyring author to implement their own hardware wallet support, and so MetaMask could offer some powerful leverage for contract wallets by allowing signers to be arbitrarily composed.\r\n\r\nIn the most complicated case, this might mean a hardware wallet is authorized to sign fot a contract identity which is authorized to sign for a multi-sig account.\r\n\r\nI know, this may be premature optimization, and we can definitely ship smaller pieces sooner, but I think keeping a consideration for this long-term path could help our architecture stay flexible going forward, because I think signer composability is eventually going to be an obviously desired feature; People will want to browse web3 sites on behalf of organizations that they are part of, and they will want to propose transactions to that organization, and they will propose those transactions from their uPort identities (contract accounts), which they will likely authorize from their phones or hardware devices.\r\n\r\n## Acceptable Formats\r\n\r\nIdeally, Keyrings themselves can be defined within a specified bundle or module, paving the way for a \"signer store\", so that eventually we can further abstract the job of selecting signers away from the core codebase to whatever mechanism we agree is the most secure and usable.","standard_bounties_id":42,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/MetaMask/metamask-extension/3133","created_on":"2018-02-20T15:03:04.871380-07:00","modified_on":"2018-03-15T23:15:08.470580-07:00","title":"MetaMask blocked in Firefox by CSP","web3_created":"2018-02-14T12:53:15-07:00","value_in_token":"105000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"","project_length":"Unknown","experience_level":"","github_url":"https://github.com/MetaMask/metamask-extension/issues/3133","github_comments":11,"bounty_owner_address":"0x87054a1ab0706f913c332298fa61dc75e3635e63","bounty_owner_email":"","bounty_owner_github_username":"","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2019-02-14T12:53:15-07:00","raw_data":{"id":46,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"MetaMask blocked in Firefox by CSP","issuer":{"name":"Marcus","email":"","address":"0x87054a1ab0706f913c332298fa61dc75e3635e63","githubUsername":""},"created":1518663195,"funders":[],"metadata":{"fullName":"Marcus","tokenName":"ETH","bountyType":"","issueTitle":"MetaMask blocked in Firefox by CSP","issueKeywords":"metamask-extension, MetaMask, JavaScript, CSS, HTML","projectLength":"Unknown","githubUsername":"","experienceLevel":"","issueDescription":"Hey, as far as I can tell, my content security policy is preventing MetaMask from injecting its scripts. This is only happening in Firefox. It works correctly in Chrome, Safari, Opera, and Brave. My `script-src` directive looks like this:\n```\nscript-src 'self';\n```\nand I'm seeing this csp violation in the js console:\n```\nContent Security Policy: The pageâs settings blocked the loading of a resource at self. Source: (function e(t,n,r){function s(o,u){if(!n ....\n```\n\nUnfortunately Firefox only shows a preview of the blocked script. I've tried sha256 hashing each of the scripts in the latest Metamask release and adding them to the CSP, but that did not work. If you have any ideas that would be great!\n\n<b>Browser:</b> Firefox 58.0.1\n<b>Operating System:</b> Mac OSX 10.13.2","notificationEmail":""},"tokenName":"ETH","categories":["metamask-extension"," MetaMask"," JavaScript"," CSS"," HTML"],"description":"Hey, as far as I can tell, my content security policy is preventing MetaMask from injecting its scripts. This is only happening in Firefox. It works correctly in Chrome, Safari, Opera, and Brave. My `script-src` directive looks like this:\n```\nscript-src 'self';\n```\nand I'm seeing this csp violation in the js console:\n```\nContent Security Policy: The pageâs settings blocked the loading of a resource at self. Source: (function e(t,n,r){function s(o,u){if(!n ....\n```\n\nUnfortunately Firefox only shows a preview of the blocked script. I've tried sha256 hashing each of the scripts in the latest Metamask release and adding them to the CSP, but that did not work. If you have any ideas that would be great!\n\n<b>Browser:</b> Firefox 58.0.1\n<b>Operating System:</b> Mac OSX 10.13.2","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/MetaMask/metamask-extension/issues/3133","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x87054a1aB0706F913c332298Fa61DC75E3635e63","arbiter":"0x0000000000000000000000000000000000000000","balance":105000000000000000,"network":"mainnet","deadline":1550199195,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":105000000000000000},"metadata":{"fullName":"Marcus","tokenName":"ETH","bountyType":"","issueTitle":"MetaMask blocked in Firefox by CSP","issueKeywords":"metamask-extension, MetaMask, JavaScript, CSS, HTML","projectLength":"Unknown","githubUsername":"","experienceLevel":"","issueDescription":"Hey, as far as I can tell, my content security policy is preventing MetaMask from injecting its scripts. This is only happening in Firefox. It works correctly in Chrome, Safari, Opera, and Brave. My `script-src` directive looks like this:\n```\nscript-src 'self';\n```\nand I'm seeing this csp violation in the js console:\n```\nContent Security Policy: The pageâs settings blocked the loading of a resource at self. Source: (function e(t,n,r){function s(o,u){if(!n ....\n```\n\nUnfortunately Firefox only shows a preview of the blocked script. I've tried sha256 hashing each of the scripts in the latest Metamask release and adding them to the CSP, but that did not work. If you have any ideas that would be great!\n\n<b>Browser:</b> Firefox 58.0.1\n<b>Operating System:</b> Mac OSX 10.13.2","notificationEmail":""},"current_bounty":true,"value_in_eth":1.05e+17,"token_value_in_usdt":607.66,"value_in_usdt":63.8,"status":"open","now":"2018-03-16T06:17:03.550540Z","avatar_url":"https://avatars2.githubusercontent.com/u/11744586?v=4","value_true":0.105,"issue_description":"Hey, as far as I can tell, my content security policy is preventing MetaMask from injecting its scripts. This is only happening in Firefox. It works correctly in Chrome, Safari, Opera, and Brave. My `script-src` directive looks like this:\r\n```\r\nscript-src 'self';\r\n```\r\nand I'm seeing this csp violation in the js console:\r\n```\r\nContent Security Policy: The page’s settings blocked the loading of a resource at self. Source: (function e(t,n,r){function s(o,u){if(!n ....\r\n```\r\n\r\nUnfortunately Firefox only shows a preview of the blocked script. I've tried sha256 hashing each of the scripts in the latest Metamask release and adding them to the CSP, but that did not work. If you have any ideas that would be great!\r\n\r\n<b>Browser:</b> Firefox 58.0.1\r\n<b>Operating System:</b> Mac OSX 10.13.2\r\n","network":"mainnet","org_name":"MetaMask","pk":1360,"issue_description_text":"Hey, as far as I can tell, my content security policy is preventing MetaMask from injecting its scripts. This is only happening in Firefox. It works correctly in Chrome, Safari, Opera, and Brave. My `script-src` directive looks like this:\r\n```\r\nscript-src 'self';\r\n```\r\nand I'm seeing this csp violation in the js console:\r\n```\r\nContent Security Policy: The page’s settings blocked the loading of a resource at self. Source: (function e(t,n,r){function s(o,u){if(!n ....\r\n```\r\n\r\nUnfortunately Firefox only shows a preview of the blocked script. I've tried sha256 hashing each of the scripts in the latest Metamask release and adding them to the CSP, but that did not work. If you have any ideas that would be great!\r\n\r\nBrowser: Firefox 58.0.1\r\nOperating System: Mac OSX 10.13.2","standard_bounties_id":46,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/web/477","created_on":"2018-02-21T20:58:28.006480-07:00","modified_on":"2018-03-15T23:15:18.228503-07:00","title":"new_bounty marketing emails need to be moved to a background job","web3_created":"2018-02-21T13:45:45-07:00","value_in_token":"30000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Bug","project_length":"Weeks","experience_level":"Beginner","github_url":"https://github.com/gitcoinco/web/issues/477","github_comments":5,"bounty_owner_address":"0xe93d33cf8aaf56c64d23b5b248919eabd8c3c41e","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-03-23T13:45:45-07:00","raw_data":{"id":75,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"new_bounty marketing emails need to be moved to a background job","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0xe93d33cf8aaf56c64d23b5b248919eabd8c3c41e","githubUsername":"owocki"},"created":1519271145,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Bug","issueTitle":"new_bounty marketing emails need to be moved to a background job","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Weeks","githubUsername":"owocki","experienceLevel":"Beginner","issueDescription":"related commit: dd9f45ed1d4866caea6eef46a0e1051369c991ae\n\nthe new_bounty functionality doesnt scale because there are typically a bunch of matches generated in this loop => https://github.com/gitcoinco/web/blob/master/app/dashboard/notifications.py#L416-L427\n\nplease move this code into a background job.  two ways we could go:\n1. invest in a true event driven procescesing system (like celery, or a log based microservices architeture)\n2. just do it in a management command","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["web"," gitcoinco"," JavaScript"," Python"," HTML"," CSS"],"description":"related commit: dd9f45ed1d4866caea6eef46a0e1051369c991ae\n\nthe new_bounty functionality doesnt scale because there are typically a bunch of matches generated in this loop => https://github.com/gitcoinco/web/blob/master/app/dashboard/notifications.py#L416-L427\n\nplease move this code into a background job.  two ways we could go:\n1. invest in a true event driven procescesing system (like celery, or a log based microservices architeture)\n2. just do it in a management command","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/web/issues/477","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0xe93d33CF8AaF56C64D23b5b248919EabD8c3c41E","arbiter":"0x0000000000000000000000000000000000000000","balance":30000000000000000,"network":"mainnet","deadline":1521863145,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":30000000000000000},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Bug","issueTitle":"new_bounty marketing emails need to be moved to a background job","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Weeks","githubUsername":"owocki","experienceLevel":"Beginner","issueDescription":"related commit: dd9f45ed1d4866caea6eef46a0e1051369c991ae\n\nthe new_bounty functionality doesnt scale because there are typically a bunch of matches generated in this loop => https://github.com/gitcoinco/web/blob/master/app/dashboard/notifications.py#L416-L427\n\nplease move this code into a background job.  two ways we could go:\n1. invest in a true event driven procescesing system (like celery, or a log based microservices architeture)\n2. just do it in a management command","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":3e+16,"token_value_in_usdt":607.66,"value_in_usdt":18.23,"status":"open","now":"2018-03-16T06:17:03.553960Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.03,"issue_description":"related commit: dd9f45ed1d4866caea6eef46a0e1051369c991ae\r\n\r\nthe new_bounty functionality doesnt scale because there are typically a bunch of matches generated in this loop => https://github.com/gitcoinco/web/blob/master/app/dashboard/notifications.py#L416-L427\r\n\r\nplease move this code into a background job.  two ways we could go:\r\n1. invest in a true event driven procescesing system (like celery, or a log based microservices architeture)\r\n2. just do it in a management command","network":"mainnet","org_name":"gitcoinco","pk":1439,"issue_description_text":"related commit: dd9f45ed1d4866caea6eef46a0e1051369c991ae\r\n\r\nthe new_bounty functionality doesnt scale because there are typically a bunch of matches generated in this loop => https://github.com/gitcoinco/web/blob/master/app/dashboard/notifications.py#L416-L427\r\n\r\nplease move this code into a background job.  two ways we could go:\r\n1. invest in a true event driven procescesing system (like celery, or a log based microservices architeture)\r\n2. just do it in a management command","standard_bounties_id":75,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/ProjectWyvern/wyvern-ethereum/9","created_on":"2018-03-04T18:00:39.197167-07:00","modified_on":"2018-03-15T23:15:14.657526-07:00","title":"Manually pack Order struct to bytes to avoid unnecessary keccak256","web3_created":"2018-03-04T10:58:56-07:00","value_in_token":"30000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Advanced","github_url":"https://github.com/ProjectWyvern/wyvern-ethereum/issues/9","github_comments":18,"bounty_owner_address":"0x0084a81668b9a978416abeb88bc1572816cc7cac","bounty_owner_email":"protinam@protonmail.ch","bounty_owner_github_username":"protinam","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-04-03T10:58:56-07:00","raw_data":{"id":101,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Manually pack Order struct to bytes to avoid unnecessary keccak256","issuer":{"name":"Protinam","email":"protinam@protonmail.ch","address":"0x0084a81668b9a978416abeb88bc1572816cc7cac","githubUsername":"protinam"},"created":1520211536,"funders":[],"metadata":{"fullName":"Protinam","tokenName":"ETH","bountyType":"Feature","issueTitle":"Manually pack Order struct to bytes to avoid unnecessary keccak256","issueKeywords":"wyvern-ethereum, wyvern, solidity, abi, smart contracts","projectLength":"Hours","githubUsername":"protinam","experienceLevel":"Advanced","issueDescription":"Due to Solidity stack size limitations, the current order hashing implementation ([here](https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/ExchangeCore.sol#L235)) must hash orders in two parts. This is a waste of gas. Instead, manually \"tightly pack\" the Order struct into bytes following the Solidity's tight-packing convention (see [here](http://solidity.readthedocs.io/en/develop/abi-spec.html#abi-packed-mode)), which should result in one fewer calls to the `keccak256` builtin. Other ways of getting around Solidity's stack size limitation may be candidate solutions as long as they still decrease gas costs.\n\nMay be rendered easier by [this Solidity PR](https://github.com/ethereum/solidity/pull/2980), but I do not know what the timetable for that is.","notificationEmail":"protinam@protonmail.ch"},"tokenName":"ETH","categories":["wyvern-ethereum"," wyvern"," solidity"," abi"," smart contracts"],"description":"Due to Solidity stack size limitations, the current order hashing implementation ([here](https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/ExchangeCore.sol#L235)) must hash orders in two parts. This is a waste of gas. Instead, manually \"tightly pack\" the Order struct into bytes following the Solidity's tight-packing convention (see [here](http://solidity.readthedocs.io/en/develop/abi-spec.html#abi-packed-mode)), which should result in one fewer calls to the `keccak256` builtin. Other ways of getting around Solidity's stack size limitation may be candidate solutions as long as they still decrease gas costs.\n\nMay be rendered easier by [this Solidity PR](https://github.com/ethereum/solidity/pull/2980), but I do not know what the timetable for that is.","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/ProjectWyvern/wyvern-ethereum/issues/9","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x0084a81668B9A978416aBEB88bC1572816cc7cAC","arbiter":"0x0000000000000000000000000000000000000000","balance":30000000000000000,"network":"mainnet","deadline":1522803536,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":30000000000000000},"metadata":{"fullName":"Protinam","tokenName":"ETH","bountyType":"Feature","issueTitle":"Manually pack Order struct to bytes to avoid unnecessary keccak256","issueKeywords":"wyvern-ethereum, wyvern, solidity, abi, smart contracts","projectLength":"Hours","githubUsername":"protinam","experienceLevel":"Advanced","issueDescription":"Due to Solidity stack size limitations, the current order hashing implementation ([here](https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/ExchangeCore.sol#L235)) must hash orders in two parts. This is a waste of gas. Instead, manually \"tightly pack\" the Order struct into bytes following the Solidity's tight-packing convention (see [here](http://solidity.readthedocs.io/en/develop/abi-spec.html#abi-packed-mode)), which should result in one fewer calls to the `keccak256` builtin. Other ways of getting around Solidity's stack size limitation may be candidate solutions as long as they still decrease gas costs.\n\nMay be rendered easier by [this Solidity PR](https://github.com/ethereum/solidity/pull/2980), but I do not know what the timetable for that is.","notificationEmail":"protinam@protonmail.ch"},"current_bounty":true,"value_in_eth":3e+16,"token_value_in_usdt":607.66,"value_in_usdt":18.23,"status":"open","now":"2018-03-16T06:17:03.558460Z","avatar_url":"https://avatars2.githubusercontent.com/u/33922324?v=4","value_true":0.03,"issue_description":"Due to Solidity stack size limitations, the current order hashing implementation ([here](https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/ExchangeCore.sol#L235)) must hash orders in two parts. This is a waste of gas. Instead, manually \"tightly pack\" the Order struct into bytes following the Solidity tight-packing convention (see [here](http://solidity.readthedocs.io/en/develop/abi-spec.html#abi-packed-mode)), which should result in one fewer calls to the `keccak256` builtin. Other ways of getting around Solidity's stack size limitation may be candidate solutions as long as they still decrease gas costs.\r\n\r\nMay be rendered easier by [this Solidity PR](https://github.com/ethereum/solidity/pull/2980), but I do not know what the timetable for that is.","network":"mainnet","org_name":"ProjectWyvern","pk":1743,"issue_description_text":"Due to Solidity stack size limitations, the current order hashing implementation ([here](https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/ExchangeCore.sol#L235)) must hash orders in two parts. This is a waste of gas. Instead, manually \"tightly pack\" the Order struct into bytes following the Solidity tight-packing convention (see [here](http://solidity.readthedocs.io/en/develop/abi-spec.html#abi-packed-mode)), which should result in one fewer calls to the `keccak256` builtin. Other ways of getting around Solidity's stack size limitation may be candidate solutions as long as they still decrease gas costs.\r\n\r\nMay be rendered easier by [this Solidity PR](https://github.com/ethereum/solidity/pull/2980), but I do not know what the timetable for that is.","standard_bounties_id":101,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/ipld/js-cid/38","created_on":"2018-03-09T23:03:44.378953-07:00","modified_on":"2018-03-15T23:15:17.699876-07:00","title":"Webpack bundle failing at CID: Unexpected token: name (CID)","web3_created":"2018-03-06T15:42:45-07:00","value_in_token":"50000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Bug","project_length":"Days","experience_level":"Advanced","github_url":"https://github.com/ipld/js-cid/issues/38","github_comments":8,"bounty_owner_address":"0x63b7608b7f47de1c0d1f94f85ffcb260fbcb4890","bounty_owner_email":"anatoli@rainforce.org","bounty_owner_github_username":"abitrolly","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2019-03-06T15:42:45-07:00","raw_data":{"id":121,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Webpack bundle failing at CID: Unexpected token: name (CID)","issuer":{"name":"Anatoli Babenia","email":"anatoli@rainforce.org","address":"0x63b7608b7f47de1c0d1f94f85ffcb260fbcb4890","githubUsername":"abitrolly"},"created":1520401365,"funders":[],"metadata":{"fullName":"Anatoli Babenia","tokenName":"ETH","bountyType":"Bug","issueTitle":"Webpack bundle failing at CID: Unexpected token: name (CID)","issueKeywords":"js-cid, ipld, JavaScript, Groovy","projectLength":"Days","githubUsername":"abitrolly","experienceLevel":"Advanced","issueDescription":"We want to build from last version with `create-react-app`  or get example of custom Webpack configuration to build it. ","notificationEmail":"anatoli@rainforce.org"},"tokenName":"ETH","categories":["js-cid"," ipld"," JavaScript"," Groovy"],"description":"We want to build from last version with `create-react-app`  or get example of custom Webpack configuration to build it. ","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/ipld/js-cid/issues/38","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x63b7608B7F47de1c0D1F94F85ffcb260Fbcb4890","arbiter":"0x0000000000000000000000000000000000000000","balance":50000000000000000,"network":"mainnet","deadline":1551937365,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":50000000000000000},"metadata":{"fullName":"Anatoli Babenia","tokenName":"ETH","bountyType":"Bug","issueTitle":"Webpack bundle failing at CID: Unexpected token: name (CID)","issueKeywords":"js-cid, ipld, JavaScript, Groovy","projectLength":"Days","githubUsername":"abitrolly","experienceLevel":"Advanced","issueDescription":"We want to build from last version with `create-react-app`  or get example of custom Webpack configuration to build it. ","notificationEmail":"anatoli@rainforce.org"},"current_bounty":true,"value_in_eth":5e+16,"token_value_in_usdt":607.66,"value_in_usdt":30.38,"status":"open","now":"2018-03-16T06:17:03.567382Z","avatar_url":"https://avatars3.githubusercontent.com/u/19803583?v=4","value_true":0.05,"issue_description":"Hey guys, I'm trying to bundle https://github.com/ipfs/js-ipfs, and they're using cids. \r\n\r\nWhenever I try to build, `yarn run build`, with create-react-app, I'm getting this error:\r\n```\r\nstatic/js/main.d24ead13.js from UglifyJs\r\nUnexpected token: name (CID) [./~/cids/src/index.js:23,0][static/js/main.d24ead13.js:8442,6]\r\n```\r\n\r\nlooks like uglifyJS doesn't look CID? tracked it down to your package and was wondering if you had any insights.\r\n\r\nUnable to build because of this.","network":"mainnet","org_name":"ipld","pk":1806,"issue_description_text":"Hey guys, I'm trying to bundle https://github.com/ipfs/js-ipfs, and they're using cids. \r\n\r\nWhenever I try to build, `yarn run build`, with create-react-app, I'm getting this error:\r\n```\r\nstatic/js/main.d24ead13.js from UglifyJs\r\nUnexpected token: name (CID) [./~/cids/src/index.js:23,0][static/js/main.d24ead13.js:8442,6]\r\n```\r\n\r\nlooks like uglifyJS doesn't look CID? tracked it down to your package and was wondering if you had any insights.\r\n\r\nUnable to build because of this.","standard_bounties_id":121,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/web/594","created_on":"2018-03-12T09:10:09.291832-07:00","modified_on":"2018-03-15T23:15:19.754978-07:00","title":"redesign embeddable widget for github reops","web3_created":"2018-03-12T02:05:01-07:00","value_in_token":"100000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/gitcoinco/web/issues/594","github_comments":5,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-04-11T02:05:01-07:00","raw_data":{"id":123,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"redesign embeddable widget for github reops","issuer":{"name":"","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1520870701,"funders":[],"metadata":{"fullName":"","tokenName":"ETH","bountyType":"Feature","issueTitle":"redesign embeddable widget for github reops","issueKeywords":"design, gitcoinco","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2\n\n<img src='https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2'>\n\ni coded this up hackily a few months ago.  its intent was to represent the available open issues on a github repo.\n\nid like a redesigned embeddable image that looks good on github repos and is on brand.","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["design"," gitcoinco"],"description":"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2\n\n<img src='https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2'>\n\ni coded this up hackily a few months ago.  its intent was to represent the available open issues on a github repo.\n\nid like a redesigned embeddable image that looks good on github repos and is on brand.","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/web/issues/594","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":100000000000000000,"network":"mainnet","deadline":1523462701,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":100000000000000000},"metadata":{"fullName":"","tokenName":"ETH","bountyType":"Feature","issueTitle":"redesign embeddable widget for github reops","issueKeywords":"design, gitcoinco","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2\n\n<img src='https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2'>\n\ni coded this up hackily a few months ago.  its intent was to represent the available open issues on a github repo.\n\nid like a redesigned embeddable image that looks good on github repos and is on brand.","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":1e+17,"token_value_in_usdt":607.66,"value_in_usdt":60.77,"status":"open","now":"2018-03-16T06:17:03.570743Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.1,"issue_description":"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2\r\n\r\n<img src='https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2'>\r\n\r\ni coded this up hackily a few months ago.  its intent was to represent the available open issues on a github repo.\r\n\r\nid like a redesigned embeddable image that looks good on github repos and is on brand.  ","network":"mainnet","org_name":"gitcoinco","pk":1819,"issue_description_text":"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco&v=2\r\n\r\n\r\n\r\ni coded this up hackily a few months ago.  its intent was to represent the available open issues on a github repo.\r\n\r\nid like a redesigned embeddable image that looks good on github repos and is on brand.","standard_bounties_id":123,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/codesponsor/web/10?gc2","created_on":"2018-03-12T17:04:07.674888-07:00","modified_on":"2018-03-15T23:15:10.078322-07:00","title":"\"Dockerize\" application for development and update instructions in the README","web3_created":"2018-03-12T05:10:06-07:00","value_in_token":"60000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/codesponsor/web/issues/10?gc2","github_comments":9,"bounty_owner_address":"0x28e21609ca8542ce5a363cbf339529204b043ede","bounty_owner_email":"eric@codesponsor.io","bounty_owner_github_username":"coderberry","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-03-19T05:10:06-07:00","raw_data":{"id":130,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"\"Dockerize\" application for development and update instructions in the README","issuer":{"name":"Eric Berry","email":"eric@codesponsor.io","address":"0x28e21609ca8542ce5a363cbf339529204b043ede","githubUsername":"coderberry"},"created":1520881806,"funders":[],"metadata":{"fullName":"Eric Berry","tokenName":"ETH","bountyType":"Feature","issueTitle":"\"Dockerize\" application for development and update instructions in the README","issueKeywords":"web, codesponsor, CSS, Elixir, HTML, JavaScript","projectLength":"Hours","githubUsername":"coderberry","experienceLevel":"Intermediate","issueDescription":"We need the `Dockerfile` and `docker-compose.yml` files updated to where one can download the application and run it in test mode via simple instructions on the README.\n\nThe build should include not only Phoenix, but also Redis and Postgres","notificationEmail":"eric@codesponsor.io"},"tokenName":"ETH","categories":["web"," codesponsor"," CSS"," Elixir"," HTML"," JavaScript"],"description":"We need the `Dockerfile` and `docker-compose.yml` files updated to where one can download the application and run it in test mode via simple instructions on the README.\n\nThe build should include not only Phoenix, but also Redis and Postgres","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/codesponsor/web/issues/10?gc2","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x28e21609ca8542Ce5A363CBf339529204b043eDe","arbiter":"0x0000000000000000000000000000000000000000","balance":60000000000000000,"network":"mainnet","deadline":1521486606,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":60000000000000000},"metadata":{"fullName":"Eric Berry","tokenName":"ETH","bountyType":"Feature","issueTitle":"\"Dockerize\" application for development and update instructions in the README","issueKeywords":"web, codesponsor, CSS, Elixir, HTML, JavaScript","projectLength":"Hours","githubUsername":"coderberry","experienceLevel":"Intermediate","issueDescription":"We need the `Dockerfile` and `docker-compose.yml` files updated to where one can download the application and run it in test mode via simple instructions on the README.\n\nThe build should include not only Phoenix, but also Redis and Postgres","notificationEmail":"eric@codesponsor.io"},"current_bounty":true,"value_in_eth":6e+16,"token_value_in_usdt":607.66,"value_in_usdt":36.46,"status":"open","now":"2018-03-16T06:17:03.573988Z","avatar_url":"https://avatars2.githubusercontent.com/u/30100736?v=4","value_true":0.06,"issue_description":"We need the `Dockerfile` and `docker-compose.yml` files updated to where one can download the application and run it in test mode via simple instructions on the README.\r\n\r\nThe build should include not only Phoenix, but also Redis and Postgres","network":"mainnet","org_name":"codesponsor","pk":1828,"issue_description_text":"We need the `Dockerfile` and `docker-compose.yml` files updated to where one can download the application and run it in test mode via simple instructions on the README.\r\n\r\nThe build should include not only Phoenix, but also Redis and Postgres","standard_bounties_id":130,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/sxsw/1","created_on":"2018-03-12T15:49:43.596868-07:00","modified_on":"2018-03-15T23:15:19.570130-07:00","title":"SXSW hackathon - Build a Decentralized Application on Ethereum","web3_created":"2018-03-12T08:47:58-07:00","value_in_token":"500000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/gitcoinco/sxsw/issues/1","github_comments":0,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-03-26T08:47:58-07:00","raw_data":{"id":128,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"SXSW hackathon - Build a Decentralized Application on Ethereum","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1520894878,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"SXSW hackathon - Build a Decentralized Application on Ethereum","issueKeywords":"sxsw, gitcoinco","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"# Build a dApp at SXSW\n\n## Requirements\n\n- Build a decentralized application on Ethereumâs blockchain\n- Use some combination of [uPort](uport.me), [MetaMask](metamask.io), and [Truffle](http://truffleframework.com/) in your application \n- dapp must be deployed to the mainnet by the end of the hackathon\n- dapp must solve a (perceived) real world problem\n\n\n## Nice-To-Have\n- Build something related to the mission of [Gitcoin](gitcoin.co) (see: #2 or [Ujo Music](https://ujomusic.com)) \n- Members from each of these teams are at the hackathon (Eric Berry, Alex Attar, Vivek Singh) to help \n\n## Bounty\n\nSubject to the discretion of the Gitcoin team:\n.5 ETH first prize \n.25 ETH 2nd prize\n\n### Resources\n[ConsenSys Guide: SXSW dApp Developer Guide](https://docs.google.com/document/d/1w1rzJUfJ7-2WRdWrDu2DiiGJDzDaeMYzMkuTl-EOH48/edit?ts=5aa6eddf)","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["sxsw"," gitcoinco"],"description":"# Build a dApp at SXSW\n\n## Requirements\n\n- Build a decentralized application on Ethereumâs blockchain\n- Use some combination of [uPort](uport.me), [MetaMask](metamask.io), and [Truffle](http://truffleframework.com/) in your application \n- dapp must be deployed to the mainnet by the end of the hackathon\n- dapp must solve a (perceived) real world problem\n\n\n## Nice-To-Have\n- Build something related to the mission of [Gitcoin](gitcoin.co) (see: #2 or [Ujo Music](https://ujomusic.com)) \n- Members from each of these teams are at the hackathon (Eric Berry, Alex Attar, Vivek Singh) to help \n\n## Bounty\n\nSubject to the discretion of the Gitcoin team:\n.5 ETH first prize \n.25 ETH 2nd prize\n\n### Resources\n[ConsenSys Guide: SXSW dApp Developer Guide](https://docs.google.com/document/d/1w1rzJUfJ7-2WRdWrDu2DiiGJDzDaeMYzMkuTl-EOH48/edit?ts=5aa6eddf)","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/sxsw/issues/1","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":500000000000000000,"network":"mainnet","deadline":1522104478,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":500000000000000000},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"SXSW hackathon - Build a Decentralized Application on Ethereum","issueKeywords":"sxsw, gitcoinco","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"# Build a dApp at SXSW\n\n## Requirements\n\n- Build a decentralized application on Ethereumâs blockchain\n- Use some combination of [uPort](uport.me), [MetaMask](metamask.io), and [Truffle](http://truffleframework.com/) in your application \n- dapp must be deployed to the mainnet by the end of the hackathon\n- dapp must solve a (perceived) real world problem\n\n\n## Nice-To-Have\n- Build something related to the mission of [Gitcoin](gitcoin.co) (see: #2 or [Ujo Music](https://ujomusic.com)) \n- Members from each of these teams are at the hackathon (Eric Berry, Alex Attar, Vivek Singh) to help \n\n## Bounty\n\nSubject to the discretion of the Gitcoin team:\n.5 ETH first prize \n.25 ETH 2nd prize\n\n### Resources\n[ConsenSys Guide: SXSW dApp Developer Guide](https://docs.google.com/document/d/1w1rzJUfJ7-2WRdWrDu2DiiGJDzDaeMYzMkuTl-EOH48/edit?ts=5aa6eddf)","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":5e+17,"token_value_in_usdt":607.66,"value_in_usdt":303.83,"status":"open","now":"2018-03-16T06:17:03.577552Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.5,"issue_description":"# Build a dApp at SXSW\r\n\r\n## Requirements\r\n\r\n- Build a decentralized application on Ethereum’s blockchain\r\n- Use some combination of [uPort](uport.me), [MetaMask](metamask.io), and [Truffle](http://truffleframework.com/) in your application \r\n- dapp must be deployed to the mainnet by the end of the hackathon\r\n- dapp must solve a (perceived) real world problem\r\n\r\n\r\n## Nice-To-Have\r\n- Build something related to the mission of [Gitcoin](gitcoin.co) (see: #2 or [Ujo Music](https://ujomusic.com)) \r\n- Members from each of these teams are at the hackathon (Eric Berry, Alex Attar, Vivek Singh) to help \r\n\r\n## Bounty\r\n\r\nSubject to the discretion of the Gitcoin team:\r\n.5 ETH first prize \r\n.25 ETH 2nd prize\r\n\r\n### Resources\r\n[ConsenSys Guide: SXSW dApp Developer Guide](https://docs.google.com/document/d/1w1rzJUfJ7-2WRdWrDu2DiiGJDzDaeMYzMkuTl-EOH48/edit?ts=5aa6eddf)","network":"mainnet","org_name":"gitcoinco","pk":1825,"issue_description_text":"# Build a dApp at SXSW\r\n\r\n## Requirements\r\n\r\n- Build a decentralized application on Ethereum’s blockchain\r\n- Use some combination of [uPort](uport.me), [MetaMask](metamask.io), and [Truffle](http://truffleframework.com/) in your application \r\n- dapp must be deployed to the mainnet by the end of the hackathon\r\n- dapp must solve a (perceived) real world problem\r\n\r\n\r\n## Nice-To-Have\r\n- Build something related to the mission of [Gitcoin](gitcoin.co) (see: #2 or [Ujo Music](https://ujomusic.com)) \r\n- Members from each of these teams are at the hackathon (Eric Berry, Alex Attar, Vivek Singh) to help \r\n\r\n## Bounty\r\n\r\nSubject to the discretion of the Gitcoin team:\r\n.5 ETH first prize \r\n.25 ETH 2nd prize\r\n\r\n### Resources\r\n[ConsenSys Guide: SXSW dApp Developer Guide](https://docs.google.com/document/d/1w1rzJUfJ7-2WRdWrDu2DiiGJDzDaeMYzMkuTl-EOH48/edit?ts=5aa6eddf)","standard_bounties_id":128,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/sxsw/2","created_on":"2018-03-12T15:57:52.999959-07:00","modified_on":"2018-03-15T23:15:21.039983-07:00","title":"SXSW hackathon - Build A Bounties Platform","web3_created":"2018-03-12T08:50:02-07:00","value_in_token":"700000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/gitcoinco/sxsw/issues/2","github_comments":0,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-03-26T08:50:02-07:00","raw_data":{"id":129,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"SXSW hackathon - Build A Bounties Platform","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1520895002,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"SXSW hackathon - Build A Bounties Platform","issueKeywords":"sxsw, gitcoinco","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"# Context\nThis is an SXSW Bounties Track issue.\n\nPer ['Integrating Standard Bounties'](https://medium.com/gitcoin/integrating-standard-bounties-dc4cf62bf814), the Bounties.network is meant to be bounties for any knowledge work task. Gitcoin is bounties / incentivization for open source software.\n\n![image](https://user-images.githubusercontent.com/23297747/37312864-be2b4df8-261a-11e8-8e29-18c565db4dfb.png)\n\nMust be deployed to mainnet by the end of the hackathon.\nMust solve a (perceived) real world issue\n\n# What\nWe would like to incentivize you, as a member of the Gitcoin/Bounties family, to create a new vertical off of [StandardBounties](https://github.com/ConsenSys/StandardBounties). We will be awarding the best submission for this task a 1 ETH prize, assuming the below requirements are met.\n\n# Our Ideas\n## Code Mentorship Bounties\nIt'd be great to see a site where people who perform some coding mentorship task receive some amount of ETH as a prize.\n\nKind of like Google Helpouts, but on the blockchain :)\n\n## Information Bounties\nIn the 21st century, information is power. Let people put bounties on research & information gathering.\n\n## Design Bounties\nIt'd be great to see a site where people who perform some design task receives some amount of ETH as a prize\n\n## Translation Bounties\nIt'd be great to see a site where people who perform a translation (or transcription) task receives some amount of ETH as a prize\n\n## Bounty\n\nSubject to the discretion of the Gitcoin team:\n.7 ETH first prize \n\n# Requirements\n- Use the [StandardBounties](https://github.com/ConsenSys/StandardBounties) contract for some non-trivial functionality\n- Launch an MVP during SXSW.\n- Do not start work before SXSW.\n- Present your submission to Eric and Vivek at SXSW","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["sxsw"," gitcoinco"],"description":"# Context\nThis is an SXSW Bounties Track issue.\n\nPer ['Integrating Standard Bounties'](https://medium.com/gitcoin/integrating-standard-bounties-dc4cf62bf814), the Bounties.network is meant to be bounties for any knowledge work task. Gitcoin is bounties / incentivization for open source software.\n\n![image](https://user-images.githubusercontent.com/23297747/37312864-be2b4df8-261a-11e8-8e29-18c565db4dfb.png)\n\nMust be deployed to mainnet by the end of the hackathon.\nMust solve a (perceived) real world issue\n\n# What\nWe would like to incentivize you, as a member of the Gitcoin/Bounties family, to create a new vertical off of [StandardBounties](https://github.com/ConsenSys/StandardBounties). We will be awarding the best submission for this task a 1 ETH prize, assuming the below requirements are met.\n\n# Our Ideas\n## Code Mentorship Bounties\nIt'd be great to see a site where people who perform some coding mentorship task receive some amount of ETH as a prize.\n\nKind of like Google Helpouts, but on the blockchain :)\n\n## Information Bounties\nIn the 21st century, information is power. Let people put bounties on research & information gathering.\n\n## Design Bounties\nIt'd be great to see a site where people who perform some design task receives some amount of ETH as a prize\n\n## Translation Bounties\nIt'd be great to see a site where people who perform a translation (or transcription) task receives some amount of ETH as a prize\n\n## Bounty\n\nSubject to the discretion of the Gitcoin team:\n.7 ETH first prize \n\n# Requirements\n- Use the [StandardBounties](https://github.com/ConsenSys/StandardBounties) contract for some non-trivial functionality\n- Launch an MVP during SXSW.\n- Do not start work before SXSW.\n- Present your submission to Eric and Vivek at SXSW","tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/sxsw/issues/2","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":700000000000000000,"network":"mainnet","deadline":1522104602,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":700000000000000000},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"SXSW hackathon - Build A Bounties Platform","issueKeywords":"sxsw, gitcoinco","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"# Context\nThis is an SXSW Bounties Track issue.\n\nPer ['Integrating Standard Bounties'](https://medium.com/gitcoin/integrating-standard-bounties-dc4cf62bf814), the Bounties.network is meant to be bounties for any knowledge work task. Gitcoin is bounties / incentivization for open source software.\n\n![image](https://user-images.githubusercontent.com/23297747/37312864-be2b4df8-261a-11e8-8e29-18c565db4dfb.png)\n\nMust be deployed to mainnet by the end of the hackathon.\nMust solve a (perceived) real world issue\n\n# What\nWe would like to incentivize you, as a member of the Gitcoin/Bounties family, to create a new vertical off of [StandardBounties](https://github.com/ConsenSys/StandardBounties). We will be awarding the best submission for this task a 1 ETH prize, assuming the below requirements are met.\n\n# Our Ideas\n## Code Mentorship Bounties\nIt'd be great to see a site where people who perform some coding mentorship task receive some amount of ETH as a prize.\n\nKind of like Google Helpouts, but on the blockchain :)\n\n## Information Bounties\nIn the 21st century, information is power. Let people put bounties on research & information gathering.\n\n## Design Bounties\nIt'd be great to see a site where people who perform some design task receives some amount of ETH as a prize\n\n## Translation Bounties\nIt'd be great to see a site where people who perform a translation (or transcription) task receives some amount of ETH as a prize\n\n## Bounty\n\nSubject to the discretion of the Gitcoin team:\n.7 ETH first prize \n\n# Requirements\n- Use the [StandardBounties](https://github.com/ConsenSys/StandardBounties) contract for some non-trivial functionality\n- Launch an MVP during SXSW.\n- Do not start work before SXSW.\n- Present your submission to Eric and Vivek at SXSW","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":7e+17,"token_value_in_usdt":607.66,"value_in_usdt":425.36,"status":"open","now":"2018-03-16T06:17:03.580935Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.7,"issue_description":"# Context\r\nThis is an SXSW Bounties Track issue.\r\n\r\nPer ['Integrating Standard Bounties'](https://medium.com/gitcoin/integrating-standard-bounties-dc4cf62bf814), the Bounties.network is meant to be bounties for any knowledge work task. Gitcoin is bounties / incentivization for open source software.\r\n\r\n![image](https://user-images.githubusercontent.com/23297747/37312864-be2b4df8-261a-11e8-8e29-18c565db4dfb.png)\r\n\r\nMust be deployed to mainnet by the end of the hackathon.\r\nMust solve a (perceived) real world issue\r\n\r\n# What\r\nWe would like to incentivize you, as a member of the Gitcoin/Bounties family, to create a new vertical off of [StandardBounties](https://github.com/ConsenSys/StandardBounties). We will be awarding the best submission for this task a 1 ETH prize, assuming the below requirements are met.\r\n\r\n# Our Ideas\r\n## Code Mentorship Bounties\r\nIt'd be great to see a site where people who perform some coding mentorship task receive some amount of ETH as a prize.\r\n\r\nKind of like Google Helpouts, but on the blockchain :)\r\n\r\n## Information Bounties\r\nIn the 21st century, information is power. Let people put bounties on research & information gathering.\r\n\r\n## Design Bounties\r\nIt'd be great to see a site where people who perform some design task receives some amount of ETH as a prize\r\n\r\n## Translation Bounties\r\nIt'd be great to see a site where people who perform a translation (or transcription) task receives some amount of ETH as a prize\r\n\r\n## Bounty\r\n\r\nSubject to the discretion of the Gitcoin team:\r\n.7 ETH first prize \r\n\r\n# Requirements\r\n- Use the [StandardBounties](https://github.com/ConsenSys/StandardBounties) contract for some non-trivial functionality\r\n- Launch an MVP during SXSW.\r\n- Do not start work before SXSW.\r\n- Present your submission to Eric and Vivek at SXSW","network":"mainnet","org_name":"gitcoinco","pk":1826,"issue_description_text":"# Context\r\nThis is an SXSW Bounties Track issue.\r\n\r\nPer ['Integrating Standard Bounties'](https://medium.com/gitcoin/integrating-standard-bounties-dc4cf62bf814), the Bounties.network is meant to be bounties for any knowledge work task. Gitcoin is bounties / incentivization for open source software.\r\n\r\n![image](https://user-images.githubusercontent.com/23297747/37312864-be2b4df8-261a-11e8-8e29-18c565db4dfb.png)\r\n\r\nMust be deployed to mainnet by the end of the hackathon.\r\nMust solve a (perceived) real world issue\r\n\r\n# What\r\nWe would like to incentivize you, as a member of the Gitcoin/Bounties family, to create a new vertical off of [StandardBounties](https://github.com/ConsenSys/StandardBounties). We will be awarding the best submission for this task a 1 ETH prize, assuming the below requirements are met.\r\n\r\n# Our Ideas\r\n## Code Mentorship Bounties\r\nIt'd be great to see a site where people who perform some coding mentorship task receive some amount of ETH as a prize.\r\n\r\nKind of like Google Helpouts, but on the blockchain :)\r\n\r\n## Information Bounties\r\nIn the 21st century, information is power. Let people put bounties on research & information gathering.\r\n\r\n## Design Bounties\r\nIt'd be great to see a site where people who perform some design task receives some amount of ETH as a prize\r\n\r\n## Translation Bounties\r\nIt'd be great to see a site where people who perform a translation (or transcription) task receives some amount of ETH as a prize\r\n\r\n## Bounty\r\n\r\nSubject to the discretion of the Gitcoin team:\r\n.7 ETH first prize \r\n\r\n# Requirements\r\n- Use the [StandardBounties](https://github.com/ConsenSys/StandardBounties) contract for some non-trivial functionality\r\n- Launch an MVP during SXSW.\r\n- Do not start work before SXSW.\r\n- Present your submission to Eric and Vivek at SXSW","standard_bounties_id":129,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/web/576","created_on":"2018-03-14T09:09:17.513967-07:00","modified_on":"2018-03-15T23:15:10.700928-07:00","title":"Detect \"Referencing\" as \"Work\"","web3_created":"2018-03-14T01:02:52-07:00","value_in_token":"30000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/gitcoinco/web/issues/576","github_comments":1,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-03-28T01:02:52-07:00","raw_data":{"id":139,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Detect \"Referencing\" as \"Work\"","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1521039772,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"Detect \"Referencing\" as \"Work\"","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"From the original submitter:\n\nI'm working on this funded issue:\n\nethereum/web3.py#549\n\nI got an email from gitcoin (similar to: #394), but it should have detected the references (to other, related issues) that I made. (splitting the main issue into sub-tasks/issues).\n\nExpected:\nGitcoin detects references, and resets its work-inactivity-counter.","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["web"," gitcoinco"," JavaScript"," Python"," HTML"," CSS"],"description":"From the original submitter:\n\nI'm working on this funded issue:\n\nethereum/web3.py#549\n\nI got an email from gitcoin (similar to: #394), but it should have detected the references (to other, related issues) that I made. (splitting the main issue into sub-tasks/issues).\n\nExpected:\nGitcoin detects references, and resets its work-inactivity-counter.","expire_date":1522249372,"tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/web/issues/576","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":30000000000000000,"network":"mainnet","deadline":1522249372,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":30000000000000000},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"Detect \"Referencing\" as \"Work\"","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"From the original submitter:\n\nI'm working on this funded issue:\n\nethereum/web3.py#549\n\nI got an email from gitcoin (similar to: #394), but it should have detected the references (to other, related issues) that I made. (splitting the main issue into sub-tasks/issues).\n\nExpected:\nGitcoin detects references, and resets its work-inactivity-counter.","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":3e+16,"token_value_in_usdt":607.66,"value_in_usdt":18.23,"status":"open","now":"2018-03-16T06:17:03.584804Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.03,"issue_description":"From the original submitter:\r\n\r\nI'm working on this funded issue:\r\n\r\nethereum/web3.py#549\r\n\r\nI got an email from gitcoin (similar to: #394), but it should have detected the references (to other, related issues) that I made. (splitting the main issue into sub-tasks/issues).\r\n\r\nExpected:\r\nGitcoin detects references, and resets its work-inactivity-counter.\r\n\r\n","network":"mainnet","org_name":"gitcoinco","pk":1853,"issue_description_text":"From the original submitter:\r\n\r\nI'm working on this funded issue:\r\n\r\nethereum/web3.py#549\r\n\r\nI got an email from gitcoin (similar to: #394), but it should have detected the references (to other, related issues) that I made. (splitting the main issue into sub-tasks/issues).\r\n\r\nExpected:\r\nGitcoin detects references, and resets its work-inactivity-counter.","standard_bounties_id":139,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/gitcoinco/web/623","created_on":"2018-03-14T09:09:19.803402-07:00","modified_on":"2018-03-15T23:15:17.803604-07:00","title":"Refactor the Gitcoin API ","web3_created":"2018-03-14T01:23:28-07:00","value_in_token":"50000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/gitcoinco/web/issues/623","github_comments":0,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-03-28T01:23:28-07:00","raw_data":{"id":140,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Refactor the Gitcoin API","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1521041008,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"Refactor the Gitcoin API","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"##### Description\nrouter.py\n\nWe need to refactor quite a bit of the API using more functionality in `django-filter. DjangoFilterBackend` and the `OrderingFilter`\n\n##### Possible Implementation\nSee above ^^","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["web"," gitcoinco"," JavaScript"," Python"," HTML"," CSS"],"description":"##### Description\nrouter.py\n\nWe need to refactor quite a bit of the API using more functionality in `django-filter. DjangoFilterBackend` and the `OrderingFilter`\n\n##### Possible Implementation\nSee above ^^","expire_date":1522250608,"tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/gitcoinco/web/issues/623","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":50000000000000000,"network":"mainnet","deadline":1522250608,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":50000000000000000},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"Refactor the Gitcoin API","issueKeywords":"web, gitcoinco, JavaScript, Python, HTML, CSS","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"##### Description\nrouter.py\n\nWe need to refactor quite a bit of the API using more functionality in `django-filter. DjangoFilterBackend` and the `OrderingFilter`\n\n##### Possible Implementation\nSee above ^^","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":5e+16,"token_value_in_usdt":607.66,"value_in_usdt":30.38,"status":"open","now":"2018-03-16T06:17:03.588326Z","avatar_url":"https://avatars1.githubusercontent.com/u/30044474?v=4","value_true":0.05,"issue_description":"##### Description\r\nrouter.py\r\n\r\nWe need to refactor quite a bit of the API using more functionality in `django-filter. DjangoFilterBackend` and the `OrderingFilter`\r\n\r\n##### Possible Implementation\r\nSee above ^^\r\n\r\n","network":"mainnet","org_name":"gitcoinco","pk":1854,"issue_description_text":"##### Description\r\nrouter.py\r\n\r\nWe need to refactor quite a bit of the API using more functionality in `django-filter. DjangoFilterBackend` and the `OrderingFilter`\r\n\r\n##### Possible Implementation\r\nSee above ^^","standard_bounties_id":140,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/TrustWallet/trust-wallet-ios/483","created_on":"2018-03-15T06:57:13.705213-07:00","modified_on":"2018-03-15T23:15:09.186370-07:00","title":"We should refactor Transaction and LocalizedOperationObject objects to be able to support Decodable protocol.","web3_created":"2018-03-14T23:56:21-07:00","value_in_token":"40000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/TrustWallet/trust-wallet-ios/issues/483","github_comments":2,"bounty_owner_address":"0x5e31a998da1c1371fa7dc80da50ebc500f59094f","bounty_owner_email":"oleghordiichuk@gmail.com","bounty_owner_github_username":"OlegGordiichuk","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2019-03-14T23:56:21-07:00","raw_data":{"id":144,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"We should refactor Transaction and LocalizedOperationObject objects to be able to support Decodable protocol.","issuer":{"name":"Oleg Gordiichuk","email":"oleghordiichuk@gmail.com","address":"0x5e31a998da1c1371fa7dc80da50ebc500f59094f","githubUsername":"OlegGordiichuk"},"created":1521122181,"funders":[],"metadata":{"fullName":"Oleg Gordiichuk","tokenName":"ETH","bountyType":"Feature","issueTitle":"We should refactor Transaction and LocalizedOperationObject objects to be able to support Decodable protocol.","issueKeywords":"trust-wallet-ios, TrustWallet, Swift, Ruby, Other","projectLength":"Hours","githubUsername":"OlegGordiichuk","experienceLevel":"Intermediate","issueDescription":"Models Transaction and LocalizedOperationObject should support Decodable protocol.\n\nAnd we should get read of the unnecessary wrappers : RawTransaction, RawTransaction.\n\nFor more info take a look at this classes: TokenObject, NonFungibleTokenObject.","notificationEmail":"oleghordiichuk@gmail.com"},"tokenName":"ETH","categories":["trust-wallet-ios"," TrustWallet"," Swift"," Ruby"," Other"],"description":"Models Transaction and LocalizedOperationObject should support Decodable protocol.\n\nAnd we should get read of the unnecessary wrappers : RawTransaction, RawTransaction.\n\nFor more info take a look at this classes: TokenObject, NonFungibleTokenObject.","expire_date":1552658181,"tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/TrustWallet/trust-wallet-ios/issues/483","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x5E31A998dA1c1371FA7dC80dA50EBC500F59094f","arbiter":"0x0000000000000000000000000000000000000000","balance":40000000000000000,"network":"mainnet","deadline":1552658181,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":40000000000000000},"metadata":{"fullName":"Oleg Gordiichuk","tokenName":"ETH","bountyType":"Feature","issueTitle":"We should refactor Transaction and LocalizedOperationObject objects to be able to support Decodable protocol.","issueKeywords":"trust-wallet-ios, TrustWallet, Swift, Ruby, Other","projectLength":"Hours","githubUsername":"OlegGordiichuk","experienceLevel":"Intermediate","issueDescription":"Models Transaction and LocalizedOperationObject should support Decodable protocol.\n\nAnd we should get read of the unnecessary wrappers : RawTransaction, RawTransaction.\n\nFor more info take a look at this classes: TokenObject, NonFungibleTokenObject.","notificationEmail":"oleghordiichuk@gmail.com"},"current_bounty":true,"value_in_eth":4e+16,"token_value_in_usdt":607.66,"value_in_usdt":24.31,"status":"open","now":"2018-03-16T06:17:03.591580Z","avatar_url":"https://avatars2.githubusercontent.com/u/32179889?v=4","value_true":0.04,"issue_description":"Models Transaction and LocalizedOperationObject should support Decodable protocol.\r\n\r\nAnd we should get read of the unnecessary wrappers : RawTransaction, RawLocalizedOperation.\r\n\r\nFor more info take a look at these classes: TokenObject, NonFungibleTokenObject.","network":"mainnet","org_name":"TrustWallet","pk":1868,"issue_description_text":"Models Transaction and LocalizedOperationObject should support Decodable protocol.\r\n\r\nAnd we should get read of the unnecessary wrappers : RawTransaction, RawLocalizedOperation.\r\n\r\nFor more info take a look at these classes: TokenObject, NonFungibleTokenObject.","standard_bounties_id":144,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/AgileVentures/WebsiteOne/2221","created_on":"2018-03-15T12:31:14.743043-07:00","modified_on":"2018-03-15T23:15:11.109248-07:00","title":"rake#karma_calculator","web3_created":"2018-03-15T05:28:07-07:00","value_in_token":"100000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/AgileVentures/WebsiteOne/issues/2221","github_comments":0,"bounty_owner_address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","bounty_owner_email":"ksowocki@gmail.com","bounty_owner_github_username":"owocki","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2018-04-14T05:28:07-07:00","raw_data":{"id":145,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"rake#karma_calculator","issuer":{"name":"Kevin Owocki","email":"ksowocki@gmail.com","address":"0x4331b095bc38dc3bce0a269682b5ebaefa252929","githubUsername":"owocki"},"created":1521142087,"funders":[],"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"rake#karma_calculator","issueKeywords":"WebsiteOne, AgileVentures, HTML, Ruby, Gherkin, CSS, JavaScript, Shell","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"The Rake Karma Calculator task is a background task that reviews all the user data to calculate the karma score that is then used to rank them on the users page.\n\nThe rake task is located here `lib/tasks/scheduler.rake`:\n\n```ruby\ntask :karma_calculator => :environment do\n  User.all.each do |usr|\n    KarmaCalculator.new(usr).perform\n    usr.karma.save!\n  end\nend\n```\n\nThis is the code of the class itself `app/services/karma_calculator.rb` and probably where the bug exists:\n\n```ruby\nclass KarmaCalculator\n\n  attr_reader :user\n\n  def initialize(user)\n    @user = user\n  end\n\n  def perform\n    if user.karma\n      user.karma.total = 0\n    else\n      user.karma = Karma.find_or_create_by(user_id: user.id, total: 0)\n    end\n\n    return if user.created_at.blank?\n    user.karma.total = sum_elements\n    # better to have time in pairing sessions, code contributed (related to quality), issues, ...\n  end\n\n  private\n\n  def sum_elements\n    membership_length + profile_completeness + activity + number_hangouts_started_with_more_than_one_participant + number_github_contributions + hangouts_attended_with_more_than_one_participant\n  end\n\n  def membership_length # 6\n    user.membership_length\n  end\n\n  def profile_completeness # 10\n    awarded = user.profile_completeness\n    awarded += user.authentications.count * 100\n    return awarded\n  end\n\n  def number_github_contributions\n    user.commit_count_total\n  end\n\n  def number_hangouts_started_with_more_than_one_participant\n    user.number_hangouts_started_with_more_than_one_participant\n  end\n\n  def hangouts_attended_with_more_than_one_participant\n    id = gplus_id\n    return 0 unless id\n    hangouts_attended = calculate_hangouts_attended_with_more_than_one_participant(id)\n    user.hangouts_attended_with_more_than_one_participant = hangouts_attended\n  end\n\n  def gplus_id\n    gplus_auth = user.authentications.select { |a| a.provider == 'gplus' }\n    gplus_auth.try(:first).try(:uid)\n  end\n\n  def calculate_hangouts_attended_with_more_than_one_participant(id)\n    EventInstance.all.select do |i|\n      more_than_one?(i) && i.participants.to_unsafe_h.values.any? do |p|\n        p['person']['id'] == id\n      end\n    end.count\n  end\n\n  def more_than_one?(event_instance)\n    !event_instance.participants.nil? && event_instance.participants.to_unsafe_h.values.count > 1\n  end\n\n  def activity # 6\n    user.activity\n  end\n\nend\n```\n\nIt's been suggested that this isn't working correctly and may be related to the following airbrake issues: https://github.com/AgileVentures/WebsiteOne/issues/2206\nhttps://github.com/AgileVentures/WebsiteOne/issues/2241\nhttps://github.com/AgileVentures/WebsiteOne/issues/2245","notificationEmail":"ksowocki@gmail.com"},"tokenName":"ETH","categories":["WebsiteOne"," AgileVentures"," HTML"," Ruby"," Gherkin"," CSS"," JavaScript"," Shell"],"description":"The Rake Karma Calculator task is a background task that reviews all the user data to calculate the karma score that is then used to rank them on the users page.\n\nThe rake task is located here `lib/tasks/scheduler.rake`:\n\n```ruby\ntask :karma_calculator => :environment do\n  User.all.each do |usr|\n    KarmaCalculator.new(usr).perform\n    usr.karma.save!\n  end\nend\n```\n\nThis is the code of the class itself `app/services/karma_calculator.rb` and probably where the bug exists:\n\n```ruby\nclass KarmaCalculator\n\n  attr_reader :user\n\n  def initialize(user)\n    @user = user\n  end\n\n  def perform\n    if user.karma\n      user.karma.total = 0\n    else\n      user.karma = Karma.find_or_create_by(user_id: user.id, total: 0)\n    end\n\n    return if user.created_at.blank?\n    user.karma.total = sum_elements\n    # better to have time in pairing sessions, code contributed (related to quality), issues, ...\n  end\n\n  private\n\n  def sum_elements\n    membership_length + profile_completeness + activity + number_hangouts_started_with_more_than_one_participant + number_github_contributions + hangouts_attended_with_more_than_one_participant\n  end\n\n  def membership_length # 6\n    user.membership_length\n  end\n\n  def profile_completeness # 10\n    awarded = user.profile_completeness\n    awarded += user.authentications.count * 100\n    return awarded\n  end\n\n  def number_github_contributions\n    user.commit_count_total\n  end\n\n  def number_hangouts_started_with_more_than_one_participant\n    user.number_hangouts_started_with_more_than_one_participant\n  end\n\n  def hangouts_attended_with_more_than_one_participant\n    id = gplus_id\n    return 0 unless id\n    hangouts_attended = calculate_hangouts_attended_with_more_than_one_participant(id)\n    user.hangouts_attended_with_more_than_one_participant = hangouts_attended\n  end\n\n  def gplus_id\n    gplus_auth = user.authentications.select { |a| a.provider == 'gplus' }\n    gplus_auth.try(:first).try(:uid)\n  end\n\n  def calculate_hangouts_attended_with_more_than_one_participant(id)\n    EventInstance.all.select do |i|\n      more_than_one?(i) && i.participants.to_unsafe_h.values.any? do |p|\n        p['person']['id'] == id\n      end\n    end.count\n  end\n\n  def more_than_one?(event_instance)\n    !event_instance.participants.nil? && event_instance.participants.to_unsafe_h.values.count > 1\n  end\n\n  def activity # 6\n    user.activity\n  end\n\nend\n```\n\nIt's been suggested that this isn't working correctly and may be related to the following airbrake issues: https://github.com/AgileVentures/WebsiteOne/issues/2206\nhttps://github.com/AgileVentures/WebsiteOne/issues/2241\nhttps://github.com/AgileVentures/WebsiteOne/issues/2245","expire_date":1523734087,"tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/AgileVentures/WebsiteOne/issues/2221","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x4331B095bC38Dc3bCE0A269682b5eBAefa252929","arbiter":"0x0000000000000000000000000000000000000000","balance":100000000000000000,"network":"mainnet","deadline":1523734087,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":100000000000000000},"metadata":{"fullName":"Kevin Owocki","tokenName":"ETH","bountyType":"Feature","issueTitle":"rake#karma_calculator","issueKeywords":"WebsiteOne, AgileVentures, HTML, Ruby, Gherkin, CSS, JavaScript, Shell","projectLength":"Hours","githubUsername":"owocki","experienceLevel":"Intermediate","issueDescription":"The Rake Karma Calculator task is a background task that reviews all the user data to calculate the karma score that is then used to rank them on the users page.\n\nThe rake task is located here `lib/tasks/scheduler.rake`:\n\n```ruby\ntask :karma_calculator => :environment do\n  User.all.each do |usr|\n    KarmaCalculator.new(usr).perform\n    usr.karma.save!\n  end\nend\n```\n\nThis is the code of the class itself `app/services/karma_calculator.rb` and probably where the bug exists:\n\n```ruby\nclass KarmaCalculator\n\n  attr_reader :user\n\n  def initialize(user)\n    @user = user\n  end\n\n  def perform\n    if user.karma\n      user.karma.total = 0\n    else\n      user.karma = Karma.find_or_create_by(user_id: user.id, total: 0)\n    end\n\n    return if user.created_at.blank?\n    user.karma.total = sum_elements\n    # better to have time in pairing sessions, code contributed (related to quality), issues, ...\n  end\n\n  private\n\n  def sum_elements\n    membership_length + profile_completeness + activity + number_hangouts_started_with_more_than_one_participant + number_github_contributions + hangouts_attended_with_more_than_one_participant\n  end\n\n  def membership_length # 6\n    user.membership_length\n  end\n\n  def profile_completeness # 10\n    awarded = user.profile_completeness\n    awarded += user.authentications.count * 100\n    return awarded\n  end\n\n  def number_github_contributions\n    user.commit_count_total\n  end\n\n  def number_hangouts_started_with_more_than_one_participant\n    user.number_hangouts_started_with_more_than_one_participant\n  end\n\n  def hangouts_attended_with_more_than_one_participant\n    id = gplus_id\n    return 0 unless id\n    hangouts_attended = calculate_hangouts_attended_with_more_than_one_participant(id)\n    user.hangouts_attended_with_more_than_one_participant = hangouts_attended\n  end\n\n  def gplus_id\n    gplus_auth = user.authentications.select { |a| a.provider == 'gplus' }\n    gplus_auth.try(:first).try(:uid)\n  end\n\n  def calculate_hangouts_attended_with_more_than_one_participant(id)\n    EventInstance.all.select do |i|\n      more_than_one?(i) && i.participants.to_unsafe_h.values.any? do |p|\n        p['person']['id'] == id\n      end\n    end.count\n  end\n\n  def more_than_one?(event_instance)\n    !event_instance.participants.nil? && event_instance.participants.to_unsafe_h.values.count > 1\n  end\n\n  def activity # 6\n    user.activity\n  end\n\nend\n```\n\nIt's been suggested that this isn't working correctly and may be related to the following airbrake issues: https://github.com/AgileVentures/WebsiteOne/issues/2206\nhttps://github.com/AgileVentures/WebsiteOne/issues/2241\nhttps://github.com/AgileVentures/WebsiteOne/issues/2245","notificationEmail":"ksowocki@gmail.com"},"current_bounty":true,"value_in_eth":1e+17,"token_value_in_usdt":607.66,"value_in_usdt":60.77,"status":"open","now":"2018-03-16T06:17:03.594787Z","avatar_url":"https://avatars0.githubusercontent.com/u/5116968?v=4","value_true":0.1,"issue_description":"The Rake Karma Calculator task is a background task that reviews all the user data to calculate the karma score that is then used to rank them on the users page.\r\n\r\nThe rake task is located here `lib/tasks/scheduler.rake`:\r\n\r\n```ruby\r\ntask :karma_calculator => :environment do\r\n  User.all.each do |usr|\r\n    KarmaCalculator.new(usr).perform\r\n    usr.karma.save!\r\n  end\r\nend\r\n```\r\n\r\nThis is the code of the class itself `app/services/karma_calculator.rb` and probably where the bug exists:\r\n\r\n```ruby\r\nclass KarmaCalculator\r\n\r\n  attr_reader :user\r\n\r\n  def initialize(user)\r\n    @user = user\r\n  end\r\n\r\n  def perform\r\n    if user.karma\r\n      user.karma.total = 0\r\n    else\r\n      user.karma = Karma.find_or_create_by(user_id: user.id, total: 0)\r\n    end\r\n\r\n    return if user.created_at.blank?\r\n    user.karma.total = sum_elements\r\n    # better to have time in pairing sessions, code contributed (related to quality), issues, ...\r\n  end\r\n\r\n  private\r\n\r\n  def sum_elements\r\n    membership_length + profile_completeness + activity + number_hangouts_started_with_more_than_one_participant + number_github_contributions + hangouts_attended_with_more_than_one_participant\r\n  end\r\n\r\n  def membership_length # 6\r\n    user.membership_length\r\n  end\r\n\r\n  def profile_completeness # 10\r\n    awarded = user.profile_completeness\r\n    awarded += user.authentications.count * 100\r\n    return awarded\r\n  end\r\n\r\n  def number_github_contributions\r\n    user.commit_count_total\r\n  end\r\n\r\n  def number_hangouts_started_with_more_than_one_participant\r\n    user.number_hangouts_started_with_more_than_one_participant\r\n  end\r\n\r\n  def hangouts_attended_with_more_than_one_participant\r\n    id = gplus_id\r\n    return 0 unless id\r\n    hangouts_attended = calculate_hangouts_attended_with_more_than_one_participant(id)\r\n    user.hangouts_attended_with_more_than_one_participant = hangouts_attended\r\n  end\r\n\r\n  def gplus_id\r\n    gplus_auth = user.authentications.select { |a| a.provider == 'gplus' }\r\n    gplus_auth.try(:first).try(:uid)\r\n  end\r\n\r\n  def calculate_hangouts_attended_with_more_than_one_participant(id)\r\n    EventInstance.all.select do |i|\r\n      more_than_one?(i) && i.participants.to_unsafe_h.values.any? do |p|\r\n        p['person']['id'] == id\r\n      end\r\n    end.count\r\n  end\r\n\r\n  def more_than_one?(event_instance)\r\n    !event_instance.participants.nil? && event_instance.participants.to_unsafe_h.values.count > 1\r\n  end\r\n\r\n  def activity # 6\r\n    user.activity\r\n  end\r\n\r\nend\r\n```\r\n\r\nIt's been suggested that this isn't working correctly and may be related to the following airbrake issues: https://github.com/AgileVentures/WebsiteOne/issues/2206\r\nhttps://github.com/AgileVentures/WebsiteOne/issues/2241\r\nhttps://github.com/AgileVentures/WebsiteOne/issues/2245","network":"mainnet","org_name":"AgileVentures","pk":1869,"issue_description_text":"The Rake Karma Calculator task is a background task that reviews all the user data to calculate the karma score that is then used to rank them on the users page.\r\n\r\nThe rake task is located here `lib/tasks/scheduler.rake`:\r\n\r\n```ruby\r\ntask :karma_calculator => :environment do\r\n  User.all.each do |usr|\r\n    KarmaCalculator.new(usr).perform\r\n    usr.karma.save!\r\n  end\r\nend\r\n```\r\n\r\nThis is the code of the class itself `app/services/karma_calculator.rb` and probably where the bug exists:\r\n\r\n```ruby\r\nclass KarmaCalculator\r\n\r\n  attr_reader :user\r\n\r\n  def initialize(user)\r\n    @user = user\r\n  end\r\n\r\n  def perform\r\n    if user.karma\r\n      user.karma.total = 0\r\n    else\r\n      user.karma = Karma.find_or_create_by(user_id: user.id, total: 0)\r\n    end\r\n\r\n    return if user.created_at.blank?\r\n    user.karma.total = sum_elements\r\n    # better to have time in pairing sessions, code contributed (related to quality), issues, ...\r\n  end\r\n\r\n  private\r\n\r\n  def sum_elements\r\n    membership_length + profile_completeness + activity + number_hangouts_started_with_more_than_one_participant + number_github_contributions + hangouts_attended_with_more_than_one_participant\r\n  end\r\n\r\n  def membership_length # 6\r\n    user.membership_length\r\n  end\r\n\r\n  def profile_completeness # 10\r\n    awarded = user.profile_completeness\r\n    awarded += user.authentications.count * 100\r\n    return awarded\r\n  end\r\n\r\n  def number_github_contributions\r\n    user.commit_count_total\r\n  end\r\n\r\n  def number_hangouts_started_with_more_than_one_participant\r\n    user.number_hangouts_started_with_more_than_one_participant\r\n  end\r\n\r\n  def hangouts_attended_with_more_than_one_participant\r\n    id = gplus_id\r\n    return 0 unless id\r\n    hangouts_attended = calculate_hangouts_attended_with_more_than_one_participant(id)\r\n    user.hangouts_attended_with_more_than_one_participant = hangouts_attended\r\n  end\r\n\r\n  def gplus_id\r\n    gplus_auth = user.authentications.select { |a| a.provider == 'gplus' }\r\n    gplus_auth.try(:first).try(:uid)\r\n  end\r\n\r\n  def calculate_hangouts_attended_with_more_than_one_participant(id)\r\n    EventInstance.all.select do |i|\r\n      more_than_one?(i) && i.participants.to_unsafe_h.values.any? do |p|\r\n        p['person']['id'] == id\r\n      end\r\n    end.count\r\n  end\r\n\r\n  def more_than_one?(event_instance)\r\n    !event_instance.participants.nil? && event_instance.participants.to_unsafe_h.values.count > 1\r\n  end\r\n\r\n  def activity # 6\r\n    user.activity\r\n  end\r\n\r\nend\r\n```\r\n\r\nIt's been suggested that this isn't working correctly and may be related to the following airbrake issues: https://github.com/AgileVentures/WebsiteOne/issues/2206\r\nhttps://github.com/AgileVentures/WebsiteOne/issues/2241\r\nhttps://github.com/AgileVentures/WebsiteOne/issues/2245","standard_bounties_id":145,"web3_type":"bounties_network","can_submit_after_expiration_date":false},{"url":"/issue/TrustWallet/trust-wallet-ios/488","created_on":"2018-03-15T15:36:41.511385-07:00","modified_on":"2018-03-15T23:15:09.954844-07:00","title":"Add pagination for transaction view controller.","web3_created":"2018-03-15T08:36:08-07:00","value_in_token":"50000000000000000.00","token_name":"ETH","token_address":"0x0000000000000000000000000000000000000000","bounty_type":"Feature","project_length":"Hours","experience_level":"Intermediate","github_url":"https://github.com/TrustWallet/trust-wallet-ios/issues/488","github_comments":0,"bounty_owner_address":"0x5e31a998da1c1371fa7dc80da50ebc500f59094f","bounty_owner_email":"oleghordiichuk@gmail.com","bounty_owner_github_username":"OlegGordiichuk","fulfillments":[],"interested":[],"is_open":true,"expires_date":"2019-03-15T08:36:08-07:00","raw_data":{"id":146,"data":{"meta":{"platform":"gitcoin","schemaName":"gitcoinBounty","schemaVersion":"0.1"},"payload":{"title":"Add pagination for transaction view controller.","issuer":{"name":"Oleg Gordiichuk","email":"oleghordiichuk@gmail.com","address":"0x5e31a998da1c1371fa7dc80da50ebc500f59094f","githubUsername":"OlegGordiichuk"},"created":1521153368,"funders":[],"metadata":{"fullName":"Oleg Gordiichuk","tokenName":"ETH","bountyType":"Feature","issueTitle":"Add pagination for transaction view controller.","issueKeywords":"trust-wallet-ios, TrustWallet, Swift","projectLength":"Hours","githubUsername":"OlegGordiichuk","experienceLevel":"Intermediate","issueDescription":"Add support for pagination of the user transactions. User should have infinite scroll.","notificationEmail":"oleghordiichuk@gmail.com"},"tokenName":"ETH","categories":["trust-wallet-ios"," TrustWallet"," Swift"],"description":"Add support for pagination of the user transactions. User should have infinite scroll.","expire_date":1552689368,"tokenAddress":"0x0000000000000000000000000000000000000000","sourceFileHash":"","sourceFileName":"","webReferenceURL":"https://github.com/TrustWallet/trust-wallet-ios/issues/488","sourceDirectoryHash":""}},"token":"0x0000000000000000000000000000000000000000","issuer":"0x5E31A998dA1c1371FA7dC80dA50EBC500F59094f","arbiter":"0x0000000000000000000000000000000000000000","balance":50000000000000000,"network":"mainnet","deadline":1552689368,"paysTokens":false,"bountyStage":1,"fulfillments":[],"fulfillmentAmount":50000000000000000},"metadata":{"fullName":"Oleg Gordiichuk","tokenName":"ETH","bountyType":"Feature","issueTitle":"Add pagination for transaction view controller.","issueKeywords":"trust-wallet-ios, TrustWallet, Swift","projectLength":"Hours","githubUsername":"OlegGordiichuk","experienceLevel":"Intermediate","issueDescription":"Add support for pagination of the user transactions. User should have infinite scroll.","notificationEmail":"oleghordiichuk@gmail.com"},"current_bounty":true,"value_in_eth":5e+16,"token_value_in_usdt":607.66,"value_in_usdt":30.38,"status":"open","now":"2018-03-16T06:17:03.598174Z","avatar_url":"https://avatars2.githubusercontent.com/u/32179889?v=4","value_true":0.05,"issue_description":"Add support for pagination of the user transactions. User should have infinite scroll.\r\n","network":"mainnet","org_name":"TrustWallet","pk":1871,"issue_description_text":"Add support for pagination of the user transactions. User should have infinite scroll.","standard_bounties_id":146,"web3_type":"bounties_network","can_submit_after_expiration_date":false}]